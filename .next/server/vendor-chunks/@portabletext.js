"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   coreBehavior: () => (/* binding */ coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* binding */ coreBehaviors),\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n\n\nfunction blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint;\n  for (const block of value)\n    if (block._key === blockOffset.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n          if (offsetLeft === 0) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: 0\n            };\n            break;\n          }\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n        }\n    }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  let offset = 0;\n  for (const block of value)\n    if (block._key === selectionPoint.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n          if (child._key === selectionPoint.path[2]._key)\n            return {\n              path: [{\n                _key: block._key\n              }],\n              offset: offset + selectionPoint.offset\n            };\n          offset += child.text.length;\n        }\n    }\n}\nfunction isEmptyTextBlock(block) {\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block))\n    return !1;\n  const onlyText = block.children.every(_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan), blockText = getTextBlockText(block);\n  return onlyText && blockText === \"\";\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nconst IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\nconst arrowDownOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowDown = isHotkey(\"ArrowDown\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlockObject)({\n      context\n    }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getNextBlock)({\n      context\n    });\n    return isArrowDown && focusBlockObject && !nextBlock;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"after\"\n  }]]\n}, arrowUpOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowUp = isHotkey(\"ArrowUp\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlockObject)({\n      context\n    }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousBlock)({\n      context\n    });\n    return isArrowUp && focusBlockObject && !previousBlock;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"before\"\n  }, {\n    type: \"select.previous block\"\n  }]]\n}, breakingBlockObject = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlockObject)({\n      context\n    });\n    return (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n      context\n    }) && focusBlockObject !== void 0;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"after\"\n  }]]\n}, deletingEmptyTextBlockAfterBlockObject = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n      context\n    }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : isEmptyTextBlock(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [{\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }, {\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  }]]\n}, deletingEmptyTextBlockBeforeBlockObject = {\n  on: \"delete.forward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n      context\n    }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getNextBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : isEmptyTextBlock(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [{\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }, {\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  }]]\n}, coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, decoratorAdd = {\n  on: \"decorator.add\",\n  actions: [({\n    event\n  }) => [event, {\n    type: \"reselect\"\n  }]]\n}, decoratorRemove = {\n  on: \"decorator.remove\",\n  guard: ({\n    event\n  }) => ({\n    decorator: event.decorator\n  }),\n  actions: [({\n    event\n  }) => [event, {\n    type: \"reselect\"\n  }]]\n}, decoratorToggle = {\n  on: \"decorator.toggle\",\n  guard: ({\n    event\n  }) => ({\n    decorator: event.decorator\n  }),\n  actions: [({\n    event\n  }) => [event, {\n    type: \"reselect\"\n  }]]\n}, coreDecoratorBehaviors = {\n  decoratorAdd,\n  decoratorRemove,\n  decoratorToggle\n}, MAX_LIST_LEVEL = 10, clearListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [{\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  }]]\n}, unindentListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [{\n    type: \"text block.set\",\n    level,\n    at: focusTextBlock.path\n  }]]\n}, clearListOnEnter = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n      context\n    }), focusListBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusListBlock)({\n      context\n    });\n    return !selectionCollapsed || !focusListBlock || !isEmptyTextBlock(focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [{\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  }]]\n}, indentListOnTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => ({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1)),\n    at: selectedListBlock.path\n  }))]\n}, unindentListOnShiftTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Shift+Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => ({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1)),\n    at: selectedListBlock.path\n  }))]\n}, coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab\n}, softReturn = {\n  on: \"insert.soft break\",\n  actions: [() => [{\n    type: \"insert.text\",\n    text: `\n`\n  }]]\n}, coreBehaviors = [softReturn, coreDecoratorBehaviors.decoratorAdd, coreDecoratorBehaviors.decoratorRemove, coreDecoratorBehaviors.decoratorToggle, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab], coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors\n};\n\n//# sourceMappingURL=behavior.core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuards: () => (/* binding */ createGuards),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction createGuards({\n  schema\n}) {\n  function isListBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListBlock)(block) && block._type === schema.block.name;\n  }\n  function isTextBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._type === schema.block.name;\n  }\n  return {\n    isListBlock,\n    isTextBlock\n  };\n}\nconst getFocusBlock = ({\n  context\n}) => {\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusListBlock = ({\n  context\n}) => {\n  const guards = createGuards(context), focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && guards.isListBlock(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusTextBlock = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusBlockObject = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = ({\n  context\n}) => {\n  const focusBlock = getFocusTextBlock({\n    context\n  });\n  if (!focusBlock)\n    return;\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[2]) ? context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = ({\n  context\n}) => {\n  const focusChild = getFocusChild({\n    context\n  });\n  return focusChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFirstBlock = ({\n  context\n}) => {\n  const node = context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getLastBlock = ({\n  context\n}) => {\n  const node = context.value[context.value.length - 1] ? context.value[context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getSelectedBlocks = ({\n  context\n}) => {\n  if (!context.selection)\n    return [];\n  const selectedBlocks = [], startKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, endKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0;\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getSelectionStartBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getSelectionEndBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getPreviousBlock = ({\n  context\n}) => {\n  let previousBlock;\n  const selectionStartBlock = getSelectionStartBlock({\n    context\n  });\n  if (!selectionStartBlock)\n    return;\n  let foundSelectionStartBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = !0;\n      break;\n    }\n    previousBlock = {\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    };\n  }\n  if (foundSelectionStartBlock && previousBlock)\n    return previousBlock;\n}, getNextBlock = ({\n  context\n}) => {\n  let nextBlock;\n  const selectionEndBlock = getSelectionEndBlock({\n    context\n  });\n  if (!selectionEndBlock)\n    return;\n  let foundSelectionEndBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = !0;\n      continue;\n    }\n    if (foundSelectionEndBlock) {\n      nextBlock = {\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      };\n      break;\n    }\n  }\n  if (foundSelectionEndBlock && nextBlock)\n    return nextBlock;\n}, isSelectionCollapsed = ({\n  context\n}) => JSON.stringify(context.selection?.anchor.path) === JSON.stringify(context.selection?.focus.path) && context.selection?.anchor.offset === context.selection?.focus.offset;\n\n//# sourceMappingURL=selector.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   editorMachine: () => (/* binding */ editorMachine),\n/* harmony export */   keyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.esm.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-ef30c65f.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./_chunks-es/selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @sanity/block-tools */ \"(ssr)/./node_modules/@sanity/block-tools/lib/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createEditorSchema(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find((field) => field.name === \"children\");\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\"Valid types for block children not found in schema (required)\");\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter((memberType) => memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field) => field.name !== blockType.name) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === \"style\");\n  if (!styleField)\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style) => style.value);\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find((btField) => btField.name === \"listItem\");\n  if (!listField)\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nfunction compileSchemaDefinition(definition) {\n  const blockObjects = definition?.blockObjects?.map((blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with the name `image`\n    name: blockObject.name === \"image\" ? \"tmp-image\" : blockObject.name,\n    title: blockObject.title,\n    icon: blockObject.icon,\n    fields: []\n  })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n    type: \"object\",\n    name: inlineObject.name,\n    title: inlineObject.title,\n    icon: inlineObject.icon,\n    fields: []\n  })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [...blockObjects.map((blockObject) => ({\n      type: blockObject.name\n    })), {\n      type: \"block\",\n      name: \"block\",\n      of: inlineObjects.map((inlineObject) => ({\n        type: inlineObject.name\n      })),\n      marks: {\n        decorators: definition?.decorators?.map((decorator) => ({\n          title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(decorator.name),\n          value: decorator.name,\n          icon: decorator.icon\n        })) ?? [],\n        annotations: definition?.annotations?.map((annotation) => ({\n          name: annotation.name,\n          type: \"object\",\n          title: annotation.title,\n          icon: annotation.icon\n        })) ?? []\n      },\n      lists: definition?.lists?.map((list) => ({\n        value: list.name,\n        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(list.name),\n        icon: list.icon\n      })) ?? [],\n      styles: definition?.styles?.map((style) => ({\n        value: style.name,\n        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(style.name),\n        icon: style.icon\n      })) ?? []\n    }]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createEditorSchema(schema);\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) => blockObject.name === \"tmp-image\" ? {\n      ...blockObject,\n      name: \"image\",\n      type: {\n        ...blockObject.type,\n        name: \"image\"\n      }\n    } : blockObject)\n  };\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_5__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_5__ && debug__WEBPACK_IMPORTED_MODULE_5__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_5__(namespace) : debug__WEBPACK_IMPORTED_MODULE_5__(rootName);\n}\nfunction createKeyedPath(point, value, types) {\n  const blockPath = [point.path[0]];\n  if (!value)\n    return null;\n  const block = value[blockPath[0]];\n  if (!block)\n    return null;\n  const keyedBlockPath = [{\n    _key: block._key\n  }];\n  if (block._type !== types.block.name)\n    return keyedBlockPath;\n  let keyedChildPath;\n  const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];\n  return child && (keyedChildPath = [\"children\", {\n    _key: child._key\n  }]), keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath;\n}\nfunction toSlatePath(path, editor) {\n  if (!editor)\n    return [];\n  const [block, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isKeySegment)(path[0]) && n._key === path[0]._key\n  }))[0] || [void 0, void 0];\n  if (!block || !slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block))\n    return [];\n  if (editor.isVoid(block))\n    return [blockPath[0], 0];\n  const childPath = [path[2]], childIndex = block.children.findIndex((child) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__([{\n    _key: child._key\n  }], childPath));\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex];\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);\n  }\n  return blockPath;\n}\nfunction toPortableTextRange(value, range, types) {\n  if (!range)\n    return null;\n  let anchor = null, focus = null;\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types);\n  anchorPath && range.anchor && (anchor = {\n    path: anchorPath,\n    offset: range.anchor.offset\n  });\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types);\n  focusPath && range.focus && (focus = {\n    path: focusPath,\n    offset: range.focus.offset\n  });\n  const backward = !!(slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(range) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(range));\n  return anchor && focus ? {\n    anchor,\n    focus,\n    backward\n  } : null;\n}\nfunction toSlateRange(selection, editor) {\n  if (!selection || !editor)\n    return null;\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset\n  }, focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset\n  };\n  return focus.path.length === 0 || anchor.path.length === 0 ? null : anchor && focus ? {\n    anchor,\n    focus\n  } : null;\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block, voidChildren = [{\n      _key: VOID_CHILD_KEY,\n      _type: \"span\",\n      text: \"\",\n      marks: []\n    }];\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: voidChildren,\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: voidChildren,\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].value && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), IS_DRAGGING = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_ELEMENT = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_ELEMENT_TARGET = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_TARGET_POSITION = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), DefaultObject = (props) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n  let t0;\n  $[0] !== props.value ? (t0 = JSON.stringify(props.value, null, 2), $[0] = props.value, $[1] = t0) : t0 = $[1];\n  let t1;\n  return $[2] !== t0 ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", { children: t0 }) }), $[2] = t0, $[3] = t1) : t1 = $[3], t1;\n};\nDefaultObject.displayName = \"DefaultObject\";\nconst DefaultBlockObject = styled_components__WEBPACK_IMPORTED_MODULE_16__.styled.div`\n  user-select: none;\n  border: ${(props) => props.selected ? \"1px solid blue\" : \"1px solid transparent\"};\n`;\nstyled_components__WEBPACK_IMPORTED_MODULE_16__.styled.span`\n  background: #999;\n  border: ${(props) => props.selected ? \"1px solid blue\" : \"1px solid transparent\"};\n`;\nconst DefaultListItem = styled_components__WEBPACK_IMPORTED_MODULE_16__.styled.div`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props) => getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props) => getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`, DefaultListItemInner = styled_components__WEBPACK_IMPORTED_MODULE_16__.styled.div``;\nfunction getLeftPositionForListLevel(level) {\n  switch (Number(level)) {\n    case 1:\n      return \"1.5em\";\n    case 2:\n      return \"3em\";\n    case 3:\n      return \"4.5em\";\n    case 4:\n      return \"6em\";\n    case 5:\n      return \"7.5em\";\n    case 6:\n      return \"9em\";\n    case 7:\n      return \"10.5em\";\n    case 8:\n      return \"12em\";\n    case 9:\n      return \"13.5em\";\n    case 10:\n      return \"15em\";\n    default:\n      return \"0em\";\n  }\n}\nconst bullets = [\"\\u25CF\", \"\\u25CB\", \"\\u25A0\"];\nfunction getContentForListLevelAndStyle(level, style) {\n  const normalizedLevel = (level - 1) % 3;\n  return style === \"bullet\" ? bullets[normalizedLevel] : \"*\";\n}\nfunction getCounterIncrementForListLevel(level) {\n  switch (level) {\n    case 1:\n      return \"listItemNumber\";\n    case 2:\n      return \"listItemAlpha\";\n    case 3:\n      return \"listItemRoman\";\n    case 4:\n      return \"listItemNumberNext\";\n    case 5:\n      return \"listItemLetterNext\";\n    case 6:\n      return \"listItemRomanNext\";\n    case 7:\n      return \"listItemNumberNextNext\";\n    case 8:\n      return \"listItemAlphaNextNext\";\n    case 9:\n      return \"listItemRomanNextNext\";\n    default:\n      return \"listItemNumberNextNextNext\";\n  }\n}\nfunction getCounterResetForListLevel(level) {\n  switch (level) {\n    case 1:\n      return \"listItemAlpha\";\n    case 2:\n      return \"listItemRoman\";\n    case 3:\n      return \"listItemNumberNext\";\n    case 4:\n      return \"listItemLetterNext\";\n    case 5:\n      return \"listItemRomanNext\";\n    case 6:\n      return \"listItemNumberNextNext\";\n    case 7:\n      return \"listItemAlphaNextNext\";\n    case 8:\n      return \"listItemRomanNextNext\";\n    case 9:\n      return \"listItemNumberNextNextNext\";\n    default:\n      return \"listItemNumberNextNextNext\";\n  }\n}\nfunction getCounterContentForListLevel(level) {\n  switch (level) {\n    case 1:\n      return \"counter(listItemNumber) '. '\";\n    case 2:\n      return \"counter(listItemAlpha, lower-alpha) '. '\";\n    case 3:\n      return \"counter(listItemRoman, lower-roman) '. '\";\n    case 4:\n      return \"counter(listItemNumberNext) '. '\";\n    case 5:\n      return \"counter(listItemLetterNext, lower-alpha) '. '\";\n    case 6:\n      return \"counter(listItemRomanNext, lower-roman) '. '\";\n    case 7:\n      return \"counter(listItemNumberNextNext) '. '\";\n    case 8:\n      return \"counter(listItemAlphaNextNext, lower-alpha) '. '\";\n    case 9:\n      return \"counter(listItemRomanNextNext, lower-roman) '. '\";\n    default:\n      return \"counter(listItemNumberNextNextNext) '. '\";\n  }\n}\nconst debug$k = debugWithName(\"components:DraggableBlock\"), DraggableBlock = (t0) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(51), {\n    children,\n    element,\n    readOnly,\n    blockRef\n  } = t0, editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSlateStatic)(), dragGhostRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(void 0), [isDragOver, setIsDragOver] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n  let t1, t2;\n  $[0] !== editor || $[1] !== element ? (t2 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, element), $[0] = editor, $[1] = element, $[2] = t2) : t2 = $[2], t1 = t2;\n  const isVoid = t1;\n  let t3, t4;\n  $[3] !== editor || $[4] !== element ? (t4 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isInline(editor, element), $[3] = editor, $[4] = element, $[5] = t4) : t4 = $[5], t3 = t4;\n  const isInline = t3, [blockElement, setBlockElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n  let t5, t6;\n  $[6] !== blockRef || $[7] !== editor || $[8] !== element ? (t5 = () => setBlockElement(blockRef ? blockRef.current : slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(editor, element)), t6 = [editor, element, blockRef], $[6] = blockRef, $[7] = editor, $[8] = element, $[9] = t5, $[10] = t6) : (t5 = $[9], t6 = $[10]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t5, t6);\n  let t7;\n  $[11] !== blockElement || $[12] !== editor || $[13] !== element ? (t7 = (event) => {\n    const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor);\n    if (!isMyDragOver || !blockElement)\n      return;\n    event.preventDefault(), event.dataTransfer.dropEffect = \"move\", IS_DRAGGING_ELEMENT_TARGET.set(editor, element);\n    const elementRect = blockElement.getBoundingClientRect(), offset = elementRect.top, height = elementRect.height, Y = event.pageY, loc = Math.abs(offset - Y);\n    if (element === editor.children[0] || (loc < height / 2 ? IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"top\") : IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"bottom\")), isMyDragOver === element) {\n      event.dataTransfer.dropEffect = \"none\";\n      return;\n    }\n    setIsDragOver(!0);\n  }, $[11] = blockElement, $[12] = editor, $[13] = element, $[14] = t7) : t7 = $[14];\n  const handleDragOver = t7;\n  let t8;\n  $[15] === Symbol.for(\"react.memo_cache_sentinel\") ? (t8 = () => {\n    setIsDragOver(!1);\n  }, $[15] = t8) : t8 = $[15];\n  const handleDragLeave = t8;\n  let t9;\n  $[16] !== editor || $[17] !== element ? (t9 = (event_0) => {\n    const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor);\n    if (targetBlock) {\n      IS_DRAGGING.set(editor, !1), event_0.preventDefault(), event_0.stopPropagation(), IS_DRAGGING_ELEMENT_TARGET.delete(editor), dragGhostRef.current && (debug$k(\"Removing drag ghost\"), document.body.removeChild(dragGhostRef.current));\n      const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);\n      IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);\n      let targetPath = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findPath(editor, targetBlock);\n      const myPath = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findPath(editor, element), isBefore = slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(myPath, targetPath);\n      if (dragPosition === \"bottom\" && !isBefore) {\n        if (targetPath[0] >= editor.children.length - 1) {\n          debug$k(\"target is already at the bottom, not moving\");\n          return;\n        }\n        const originalPath = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(targetPath), debug$k(`Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (dragPosition === \"top\" && isBefore && targetPath[0] !== editor.children.length - 1) {\n        const originalPath_0 = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(targetPath), debug$k(`Adjusting targetPath from ${JSON.stringify(originalPath_0)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(targetPath, myPath)) {\n        event_0.preventDefault(), debug$k(\"targetPath and myPath is the same, not moving\");\n        return;\n      }\n      debug$k(`Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(targetPath)} (${dragPosition})`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(editor, {\n        at: myPath,\n        to: targetPath\n      }), editor.onChange();\n      return;\n    }\n    debug$k(\"No target element, not doing anything\");\n  }, $[16] = editor, $[17] = element, $[18] = t9) : t9 = $[18];\n  const handleDragEnd = t9;\n  let t10;\n  $[19] !== editor || $[20] !== element ? (t10 = (event_1) => {\n    IS_DRAGGING_BLOCK_ELEMENT.get(editor) && (debug$k(\"On drop (prevented)\", element), event_1.preventDefault(), event_1.stopPropagation(), setIsDragOver(!1));\n  }, $[19] = editor, $[20] = element, $[21] = t10) : t10 = $[21];\n  const handleDrop = t10;\n  let t11;\n  $[22] !== editor || $[23] !== element || $[24] !== isVoid ? (t11 = (event_2) => {\n    if (!isVoid) {\n      IS_DRAGGING_BLOCK_ELEMENT.delete(editor);\n      return;\n    }\n    IS_DRAGGING.set(editor, !0), IS_DRAGGING_BLOCK_ELEMENT.set(editor, element), event_2.stopPropagation();\n    const target = event_2.target;\n    target instanceof HTMLElement && (target.style.opacity = \"1\");\n  }, $[22] = editor, $[23] = element, $[24] = isVoid, $[25] = t11) : t11 = $[25];\n  const handleDrag = t11;\n  let t12;\n  $[26] !== blockElement || $[27] !== editor || $[28] !== handleDrag || $[29] !== isInline || $[30] !== isVoid ? (t12 = (event_3) => {\n    if (!isVoid || isInline) {\n      debug$k(\"Not dragging block\"), IS_DRAGGING_BLOCK_ELEMENT.delete(editor), IS_DRAGGING.set(editor, !1);\n      return;\n    }\n    if (debug$k(\"Drag start\"), IS_DRAGGING.set(editor, !0), event_3.dataTransfer && (event_3.dataTransfer.setData(\"application/portable-text\", \"something\"), event_3.dataTransfer.effectAllowed = \"move\"), blockElement && blockElement instanceof HTMLElement) {\n      let dragGhost = blockElement.cloneNode(!0);\n      const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n      if (customGhost && (dragGhost = customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), document.body) {\n        dragGhostRef.current = dragGhost, dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const rect = blockElement.getBoundingClientRect(), x = event_3.clientX - rect.left, y = event_3.clientY - rect.top;\n        dragGhost.style.width = `${rect.width}px`, dragGhost.style.height = `${rect.height}px`, event_3.dataTransfer.setDragImage(dragGhost, x, y);\n      }\n    }\n    handleDrag(event_3);\n  }, $[26] = blockElement, $[27] = editor, $[28] = handleDrag, $[29] = isInline, $[30] = isVoid, $[31] = t12) : t12 = $[31];\n  const handleDragStart = t12;\n  let t13;\n  $[32] !== editor || $[33] !== isDragOver ? (t13 = isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[32] = editor, $[33] = isDragOver, $[34] = t13) : t13 = $[34];\n  const isDraggingOverFirstBlock = t13;\n  let t14;\n  $[35] !== editor || $[36] !== isDragOver ? (t14 = isDragOver && editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[35] = editor, $[36] = isDragOver, $[37] = t14) : t14 = $[37];\n  const isDraggingOverLastBlock = t14, dragPosition_0 = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor), isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"top\", isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"bottom\";\n  let t15, t16;\n  $[38] === Symbol.for(\"react.memo_cache_sentinel\") ? (t16 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  } }), $[38] = t16) : t16 = $[38], t15 = t16;\n  const dropIndicator = t15;\n  if (readOnly) {\n    let t172;\n    return $[39] !== children ? (t172 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children }), $[39] = children, $[40] = t172) : t172 = $[40], t172;\n  }\n  const t17 = isDraggingOverTop && dropIndicator, t18 = isDraggingOverBottom && dropIndicator;\n  let t19;\n  return $[41] !== children || $[42] !== handleDrag || $[43] !== handleDragEnd || $[44] !== handleDragOver || $[45] !== handleDragStart || $[46] !== handleDrop || $[47] !== isVoid || $[48] !== t17 || $[49] !== t18 ? (t19 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { draggable: isVoid, onDragStart: handleDragStart, onDrag: handleDrag, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDragEnd: handleDragEnd, onDrop: handleDrop, children: [\n    t17,\n    children,\n    t18\n  ] }), $[41] = children, $[42] = handleDrag, $[43] = handleDragEnd, $[44] = handleDragOver, $[45] = handleDragStart, $[46] = handleDrop, $[47] = isVoid, $[48] = t17, $[49] = t18, $[50] = t19) : t19 = $[50], t19;\n};\nDraggableBlock.displayName = \"DraggableBlock\";\ndebugWithName(\"components:Element\");\nconst EMPTY_ANNOTATIONS = [], inlineBlockStyle = {\n  display: \"inline-block\"\n}, Element = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck\n}) => {\n  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSelected)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), inlineBlockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), focused = selected && editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection) || !1, value = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0], [editor, element, schemaTypes.block.name]);\n  let renderedBlock = children, className;\n  const blockPath = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => [{\n    _key: element._key\n  }], [element]);\n  if (typeof element._type != \"string\")\n    throw new Error(\"Expected element to have a _type property\");\n  if (typeof element._key != \"string\")\n    throw new Error(\"Expected element to have a _key property\");\n  if (editor.isInline(element)) {\n    const path = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findPath(editor, element), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n      depth: 1\n    }), schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type);\n    if (!schemaType)\n      throw new Error(\"Could not find type for inline block element\");\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block)) {\n      const elmPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: element._key\n      }];\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", { ...attributes, children: [\n        children,\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", { draggable: !readOnly, className: \"pt-inline-object\", \"data-testid\": \"pt-inline-object\", ref: inlineBlockObjectRef, style: inlineBlockStyle, contentEditable: !1, children: [\n          renderChild && renderChild({\n            annotations: EMPTY_ANNOTATIONS,\n            // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }),\n            editorElementRef: inlineBlockObjectRef,\n            focused,\n            path: elmPath,\n            schemaType,\n            selected,\n            type: schemaType,\n            value\n          }),\n          !renderChild && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value })\n        ] }, element._key)\n      ] });\n    }\n    throw new Error(\"Block not found!\");\n  }\n  if (element._type === schemaTypes.block.name) {\n    className = \"pt-block pt-text-block\";\n    const isListItem = \"listItem\" in element, style = \"style\" in element && element.style || \"normal\";\n    className = `pt-block pt-text-block pt-text-block-style-${style}`;\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style);\n    renderStyle && blockStyleType && (renderedBlock = renderStyle({\n      block: element,\n      children,\n      focused,\n      selected,\n      value: style,\n      path: blockPath,\n      schemaType: blockStyleType,\n      editorElementRef: blockRef\n    }));\n    let level;\n    if (isListItem && (typeof element.level == \"number\" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item_0) => item_0.value === element.listItem);\n      renderListItem && listType ? renderedBlock = renderListItem({\n        block: value,\n        children: renderedBlock,\n        focused,\n        selected,\n        value: element.listItem,\n        path: blockPath,\n        schemaType: listType,\n        level: value.level || 1,\n        editorElementRef: blockRef\n      }) : renderedBlock = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultListItem, { listStyle: value.listItem || schemaTypes.lists[0].value, listLevel: value.level || 1, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultListItemInner, { children: renderedBlock }) });\n    }\n    const renderProps = Object.defineProperty({\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : void 0,\n      path: blockPath,\n      selected,\n      style,\n      schemaType: schemaTypes.block,\n      value\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.block;\n      }\n    }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ...attributes, className, spellCheck, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: blockRef, children: propsOrDefaultRendered }) }) }, element._key);\n  }\n  const schemaType_0 = schemaTypes.blockObjects.find((_type_0) => _type_0.name === element._type);\n  if (!schemaType_0)\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`);\n  className = \"pt-block pt-object-block\";\n  const block_0 = fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n  let renderedBlockFromProps;\n  if (renderBlock) {\n    const _props = Object.defineProperty({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }),\n      editorElementRef: blockRef,\n      focused,\n      path: blockPath,\n      schemaType: schemaType_0,\n      selected,\n      value: block_0\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n      }\n    });\n    renderedBlockFromProps = renderBlock(_props);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { ...attributes, className, children: [\n    children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(DraggableBlock, { element, readOnly, blockRef, children: [\n      renderedBlockFromProps && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: blockRef, contentEditable: !1, children: renderedBlockFromProps }),\n      !renderedBlockFromProps && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultBlockObject, { selected, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }) })\n    ] })\n  ] }, element._key);\n};\nElement.displayName = \"Element\";\nconst PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n};\nfunction DefaultAnnotation(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== props.annotation ? (t0 = () => alert(JSON.stringify(props.annotation)), $[0] = props.annotation, $[1] = t0) : t0 = $[1];\n  const handleClick = t0;\n  let t1;\n  $[2] === Symbol.for(\"react.memo_cache_sentinel\") ? (t1 = {\n    color: \"blue\"\n  }, $[2] = t1) : t1 = $[2];\n  let t2;\n  return $[3] !== handleClick || $[4] !== props.children ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { style: t1, onClick: handleClick, children: props.children }), $[3] = handleClick, $[4] = props.children, $[5] = t2) : t2 = $[5], t2;\n}\nDefaultAnnotation.displayName = \"DefaultAnnotation\";\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst FLUSH_PATCHES_THROTTLED_MS =  false ? 0 : 1e3, mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"emit has pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n      type: \"has pending patches\"\n    }),\n    \"emit mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n      context\n    }) => ({\n      type: \"mutation\",\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(context.slateEditor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(context.slateEditor))\n    })),\n    \"clear pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      pendingPatches: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      pendingPatches: ({\n        context,\n        event\n      }) => [...context.pendingPatches, event.patch]\n    })\n  },\n  guards: {\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isNormalizing(context.slateEditor)\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      on: {\n        patch: {\n          actions: [\"defer patch\", \"emit has pending patches\"],\n          target: \"has pending patches\"\n        }\n      }\n    },\n    \"has pending patches\": {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [{\n          guard: \"slate is normalizing\",\n          target: \"idle\",\n          actions: [\"emit mutation\", \"clear pending patches\"]\n        }, {\n          reenter: !0\n        }]\n      },\n      on: {\n        patch: {\n          actions: [\"defer patch\"],\n          reenter: !0\n        }\n      }\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)({\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.value).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)\n    args[_key] = arguments[_key];\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4, diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  if ((arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1) <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText2, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText2, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  const paddingLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_MARGIN;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error('Invalid patch mode \"'.concat(sign, '\" in: ').concat(line));\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nconst debug$j = debugWithName(\"plugin:withUndoRedo\"), debugVerbose$3 = debug$j.enabled && !1, SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor,\n    blockSchemaType\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, blockSchemaType.name);\n    const remotePatches = getRemotePatches(editor);\n    options.subscriptions.push(() => {\n      debug$j(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$j(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$j(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor);\n      let merge = !0;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = shouldMerge(op, lastOp) || overwrite) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$j(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      apply2(op);\n    }, editor.undo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        undos\n      } = editor.history;\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1];\n        if (debug$j(\"Undoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_15__.Operation.inverse).reverse();\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$j(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.redos.push(step), editor.history.undos.pop();\n        }\n      }\n    }, editor.redo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        redos\n      } = editor.history;\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1];\n        if (debug$j(\"Redoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$j(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.undos.push(step), editor.history.redos.pop();\n        }\n      }\n    }, editor;\n  };\n}\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  debugVerbose$3 && (debug$j(`Adjusting '${operation.type}' operation paths for '${patch.type}' patch`), debug$j(`Operation ${JSON.stringify(operation)}`), debug$j(`Patch ${JSON.stringify(patch)}`));\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$j(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$j(\"Skipping transformation that targeted removed block\"), []) : (debugVerbose$3 && (debug$j(`Selection ${JSON.stringify(editor.selection)}`), debug$j(`Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`)), [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]);\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$j(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_21__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing initial value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n      type: \"done syncing initial value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => !context.readOnly && (context.isProcessingLocalChanges || (isChangingRemotely(context.slateEditor) ?? !1)),\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => !(context.previousValue === void 0 && context.pendingValue === void 0) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  on: {\n    \"has pending patches\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"setting up\": {\n      initial: \"syncing initial value\",\n      states: {\n        \"syncing initial value\": {\n          always: {\n            guard: \"initial value synced\",\n            target: \"done syncing initial value\"\n          }\n        },\n        \"done syncing initial value\": {\n          entry: [\"emit done syncing initial value\"],\n          type: \"final\"\n        }\n      }\n    },\n    syncing: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          on: {\n            \"update value\": [{\n              guard: \"is busy\",\n              target: \"busy\",\n              actions: [\"assign pending value\"]\n            }, {\n              target: \"syncing\",\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        busy: {\n          after: {\n            1e3: [{\n              guard: \"is busy\",\n              reenter: !0\n            }, {\n              target: \"syncing\"\n            }]\n          },\n          on: {\n            \"update value\": [{\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        syncing: {\n          always: {\n            guard: \"pending value equals previous value\",\n            target: \"idle\",\n            actions: [\"clear pending value\", \"assign initial value synced\"]\n          },\n          invoke: {\n            src: \"sync value\",\n            id: \"sync value\",\n            input: ({\n              context\n            }) => ({\n              context: {\n                keyGenerator: context.keyGenerator,\n                previousValue: context.previousValue,\n                readOnly: context.readOnly,\n                schema: context.schema\n              },\n              slateEditor: context.slateEditor,\n              streamBlocks: !context.initialValueSynced,\n              value: context.pendingValue\n            })\n          },\n          on: {\n            \"update value\": {\n              actions: [\"assign pending value\"]\n            },\n            patch: {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)]\n            },\n            \"invalid value\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)]\n            },\n            \"value changed\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)]\n            },\n            \"done syncing\": [{\n              guard: \"value changed while syncing\",\n              actions: [\"assign previous value\", \"assign initial value synced\"],\n              reenter: !0\n            }, {\n              target: \"idle\",\n              actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$i = debugWithName(\"hook:useSyncValue\");\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$i(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor);\n        const childrenLength = slateEditor.children.length;\n        slateEditor.children.forEach((_, index) => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n            at: [childrenLength - 1 - index]\n          });\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n          decorators: []\n        }), {\n          at: [0]\n        }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [0, 0]);\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length;\n            if (slateValueFromProps.length < childrenLength) {\n              for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                  at: [i]\n                });\n              isChanged = !0;\n            }\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks\n            })) {\n              const {\n                blockChanged,\n                blockValid\n              } = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value\n              });\n              isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n            }\n            resolve();\n          });\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$i(\"Invalid value, returning\"), sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$i(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$i(\"Server value and editor value is equal, no need to sync.\");\n  sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nasync function* getBlocks({\n  slateValue,\n  streamBlocks\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    streamBlocks && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$i.enabled && debug$i(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$i.enabled && debug$i(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$i.enabled && debug$i(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$i(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$i(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$i(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode = slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode && isTextChanged ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode || (debug$i(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$i(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$i(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$h = debugWithName(\"component:PortableTextEditor:Synchronizer\");\nfunction Synchronizer(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(40), {\n    editorActor,\n    slateEditor\n  } = props, value = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(props.editorActor, _temp), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(props.editorActor, _temp2);\n  let t0;\n  $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];\n  const t1 = t0.context.keyGenerator;\n  let t2;\n  $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({\n    \"edit mode\": \"read only\"\n  }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];\n  let t4;\n  $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {\n    input: {\n      keyGenerator: t1,\n      readOnly: t2,\n      schema: t3.context.schema,\n      slateEditor\n    }\n  }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];\n  const syncActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useActorRef)(syncMachine, t4);\n  let t5;\n  $[11] !== editorActor ? (t5 = editorActor.getSnapshot(), $[11] = editorActor, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {\n    input: {\n      schema: t5.context.schema,\n      slateEditor\n    }\n  }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];\n  const mutationActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useActorRef)(mutationMachine, t6);\n  let t7, t8;\n  $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = () => {\n    const subscription = mutationActorRef.on(\"*\", (event) => {\n      event.type === \"has pending patches\" && syncActorRef.send({\n        type: \"has pending patches\"\n      }), event.type === \"mutation\" && (syncActorRef.send({\n        type: \"mutation\"\n      }), editorActor.send(event));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t8 = [mutationActorRef, syncActorRef, editorActor], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t7, t8);\n  let t10, t9;\n  $[21] !== props.editorActor || $[22] !== syncActorRef ? (t9 = () => {\n    const subscription_0 = syncActorRef.on(\"*\", (event_0) => {\n      props.editorActor.send(event_0);\n    });\n    return () => {\n      subscription_0.unsubscribe();\n    };\n  }, t10 = [props.editorActor, syncActorRef], $[21] = props.editorActor, $[22] = syncActorRef, $[23] = t10, $[24] = t9) : (t10 = $[23], t9 = $[24]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t9, t10);\n  let t11, t12;\n  $[25] !== readOnly || $[26] !== syncActorRef ? (t11 = () => {\n    syncActorRef.send({\n      type: \"update readOnly\",\n      readOnly\n    });\n  }, t12 = [syncActorRef, readOnly], $[25] = readOnly, $[26] = syncActorRef, $[27] = t11, $[28] = t12) : (t11 = $[27], t12 = $[28]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t11, t12);\n  let t13, t14;\n  $[29] !== syncActorRef || $[30] !== value ? (t13 = () => {\n    debug$h(\"Value from props changed, syncing new value\"), syncActorRef.send({\n      type: \"update value\",\n      value\n    });\n  }, t14 = [syncActorRef, value], $[29] = syncActorRef, $[30] = value, $[31] = t13, $[32] = t14) : (t13 = $[31], t14 = $[32]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t13, t14);\n  let t15;\n  $[33] !== editorActor || $[34] !== mutationActorRef ? (t15 = () => {\n    debug$h(\"Subscribing to patch events\");\n    const sub = editorActor.on(\"patch\", (event_1) => {\n      mutationActorRef.send(event_1);\n    });\n    return () => {\n      debug$h(\"Unsubscribing to patch events\"), sub.unsubscribe();\n    };\n  }, $[33] = editorActor, $[34] = mutationActorRef, $[35] = t15) : t15 = $[35];\n  let t16;\n  return $[36] !== editorActor || $[37] !== mutationActorRef || $[38] !== slateEditor ? (t16 = [editorActor, mutationActorRef, slateEditor], $[36] = editorActor, $[37] = mutationActorRef, $[38] = slateEditor, $[39] = t16) : t16 = $[39], (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t15, t16), null;\n}\nfunction _temp2(s_0) {\n  return s_0.matches({\n    \"edit mode\": \"read only\"\n  });\n}\nfunction _temp(s) {\n  return s.context.value;\n}\nSynchronizer.displayName = \"Synchronizer\";\nconst debug$g = debugWithName(\"operationToPatches\");\nfunction createOperationToPatches(types) {\n  const textBlockName = types.block.name;\n  function insertTextPatch(editor, operation, beforeValue) {\n    debug$g.enabled && debug$g(\"Operation\", JSON.stringify(operation, null, 2));\n    const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.diffMatchPatch)(prevText, textChild.text, path);\n    return patch.value.length ? [patch] : [];\n  }\n  function removeTextPatch(editor, operation, beforeValue) {\n    const block = editor && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;\n    if (child && !textChild)\n      throw new Error(\"Expected span\");\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n    return patch.value ? [patch] : [];\n  }\n  function setNodePatch(editor, operation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]];\n      if (typeof block._key != \"string\")\n        throw new Error(\"Expected block to have a _key\");\n      const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__({\n        ...editor.children[operation.path[0]],\n        ...operation.newProperties\n      }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__);\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(fromSlateValue([setNode], textBlockName)[0], [{\n        _key: block._key\n      }])];\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]];\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]];\n        if (child) {\n          const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n          return keys.forEach((keyName) => {\n            if (keys.length === 1 && keyName === \"_key\") {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(val, [{\n                _key: blockKey\n              }, \"children\", block.children.indexOf(child), keyName]));\n            } else {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(val, [{\n                _key: blockKey\n              }, \"children\", {\n                _key: childKey\n              }, keyName]));\n            }\n          }), patches;\n        }\n        throw new Error(\"Could not find a valid child\");\n      }\n      throw new Error(\"Could not find a valid block\");\n    } else\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n  }\n  function insertNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]], isTextBlock = editor.isTextBlock(block);\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n      return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([fromSlateValue([operation.node], textBlockName)[0]], position, [{\n        _key: targetKey\n      }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([fromSlateValue([operation.node], textBlockName)[0]], \"before\", [operation.path[0]])];\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n        ...operation.node\n      };\n      !node._type && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n      const child = fromSlateValue([{\n        _key: \"bogus\",\n        _type: textBlockName,\n        children: [node]\n      }], textBlockName)[0].children[0];\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([child], position, [{\n        _key: block._key\n      }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n        _key: block.children[operation.path[1] - 1]._key\n      }])];\n    }\n    return debug$g(\"Something was inserted into a void block. Not producing editor patches.\"), [];\n  }\n  function splitNodePatch(editor, operation, beforeValue) {\n    const patches = [], splitBlock = editor.children[operation.path[0]];\n    if (!editor.isTextBlock(splitBlock))\n      throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]];\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue([editor.children[operation.path[0] + 1]], textBlockName)[0];\n        targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([targetValue], \"after\", [{\n          _key: splitBlock._key\n        }])), oldBlock.children.slice(operation.position).forEach((span) => {\n          const path = [{\n            _key: oldBlock._key\n          }, \"children\", {\n            _key: span._key\n          }];\n          patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)(path));\n        }));\n      }\n      return patches;\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]];\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = fromSlateValue([{\n          ...splitBlock,\n          children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n        }], textBlockName)[0].children;\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)(targetSpans, \"after\", [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(splitSpan.text, [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }, \"text\"]));\n      }\n      return patches;\n    }\n    return patches;\n  }\n  function removeNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]];\n    if (operation.path.length === 1) {\n      if (block && block._key)\n        return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n          _key: block._key\n        }])];\n      throw new Error(\"Block not found\");\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]];\n      return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: spanToRemove._key\n      }])] : (debug$g(\"Span not found in editor trying to remove node\"), []);\n    } else\n      return debug$g(\"Not creating patch inside object block\"), [];\n  }\n  function mergeNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];\n    if (operation.path.length === 1)\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(newBlock, [{\n          _key: newBlock._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n          _key: block._key\n        }]));\n      } else\n        throw new Error(\"Target key not found!\");\n    else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {\n      const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n      updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(updatedSpan.text, [{\n        _key: block._key\n      }, \"children\", {\n        _key: updatedSpan._key\n      }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: removedSpan._key\n      }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n    } else\n      debug$g(\"Void nodes can't be merged, not creating any patches\");\n    return patches;\n  }\n  function moveNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n    if (!targetBlock)\n      return patches;\n    if (operation.path.length === 1) {\n      const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n        _key: block._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([fromSlateValue([block], textBlockName)[0]], position, [{\n        _key: targetBlock._key\n      }]));\n    } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {\n      const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: child._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([childToInsert], position, [{\n        _key: targetBlock._key\n      }, \"children\", {\n        _key: targetChild._key\n      }]));\n    }\n    return patches;\n  }\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch\n  };\n}\nfunction createWithEventListeners(editorActor, subscriptions) {\n  return function(editor) {\n    return editorActor.getSnapshot().context.maxBlocks !== void 0 || (subscriptions.push(() => {\n      const subscription = editorActor.on(\"*\", (event) => {\n        switch (event.type) {\n          case \"annotation.add\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.add\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"annotation.remove\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.remove\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"annotation.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.toggle\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"blur\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"blur\"\n              },\n              editor\n            });\n            break;\n          }\n          case \"decorator.add\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"decorator.add\",\n                decorator: event.decorator\n              },\n              editor\n            });\n            break;\n          }\n          case \"decorator.remove\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"decorator.remove\",\n                decorator: event.decorator\n              },\n              editor\n            });\n            break;\n          }\n          case \"decorator.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"decorator.toggle\",\n                decorator: event.decorator\n              },\n              editor\n            });\n            break;\n          }\n          case \"focus\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"focus\"\n              },\n              editor\n            });\n            break;\n          }\n          case \"insert.block object\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"insert.block object\",\n                placement: event.placement,\n                blockObject: event.blockObject\n              },\n              editor\n            });\n            break;\n          }\n          case \"insert.inline object\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"insert.inline object\",\n                inlineObject: event.inlineObject\n              },\n              editor\n            });\n            break;\n          }\n          case \"list item.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"list item.toggle\",\n                listItem: event.listItem\n              },\n              editor\n            });\n            break;\n          }\n          case \"style.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"style.toggle\",\n                style: event.style\n              },\n              editor\n            });\n            break;\n          }\n        }\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    }), editor.addMark = (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.add\",\n          decorator: mark\n        },\n        editor\n      });\n    }, editor.removeMark = (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.remove\",\n          decorator: mark\n        },\n        editor\n      });\n    }, editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text, options) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text,\n          options\n        },\n        editor\n      });\n    }), editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor, schemaTypes) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(operation.node)) {\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node) && node._type === schemaTypes.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$f = debugWithName(\"applyPatches\"), debugVerbose$2 = debug$f.enabled && !0;\nfunction createApplyPatch(schemaTypes) {\n  return (editor, patch) => {\n    let changed = !1;\n    debugVerbose$2 && (debug$f(`\n\nNEW PATCH =============================================================`), debug$f(JSON.stringify(patch, null, 2)));\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schemaTypes);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n        default:\n          debug$f(\"Unhandled patch\", patch.type);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const {\n    block,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$f(\"Block not found\"), !1;\n  if (!child || !childPath)\n    return debug$f(\"Child not found\"), !1;\n  if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);\n  debugState(editor, \"before\");\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return debugState(editor, \"after\"), !0;\n}\nfunction insertPatch(editor, patch, schemaTypes) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!targetBlock || !targetBlockPath)\n    return debug$f(\"Block not found\"), !1;\n  if (patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$f(\"Ignoring patch targeting void value\"), !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex;\n    return debug$f(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), debugState(editor, \"after\"), !0;\n  }\n  const {\n    items,\n    position\n  } = patch;\n  if (!targetChild || !targetChildPath)\n    return debug$f(\"Child not found\"), !1;\n  const childrenToInsert = targetBlock && toSlateValue([{\n    ...targetBlock,\n    children: items\n  }], {\n    schemaTypes\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === \"after\" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [targetChildPath[0], normalizedIdx];\n  return debug$f(`Inserting children at path ${childInsertPath}`), debugState(editor, \"before\"), childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), debugState(editor, \"after\"), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$f(\"Block not found\"), !1;\n  const isTextBlock = editor.isTextBlock(block);\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$f(\"Ignoring setting void value\"), !1;\n  if (debugState(editor, \"before\"), isTextBlock && child && childPath) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(value) && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child)) {\n      const newText = child.text;\n      value.text !== newText && (debug$f(\"Setting text property\"), editor.apply({\n        type: \"remove_text\",\n        path: childPath,\n        offset: 0,\n        text: newText\n      }), editor.apply({\n        type: \"insert_text\",\n        path: childPath,\n        offset: 0,\n        text: value.text\n      }), editor.onChange());\n    } else\n      debug$f(\"Setting non-text property\"), editor.apply({\n        type: \"set_node\",\n        path: childPath,\n        properties: {},\n        newProperties: value\n      });\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug$f(\"Setting block property\");\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: prevChildren,\n      ...prevRest\n    } = block || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: blockPath,\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    }), debug$f(\"Setting children\"), block.children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c2\n      });\n    }), Array.isArray(children) && children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: blockPath.concat(cIndex),\n        node: c2\n      });\n    });\n  } else if (block && \"value\" in block) {\n    const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.applyAll)([block.value], [patch])[0];\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n      ...block,\n      value: newVal\n    }, {\n      at: blockPath\n    }), !0;\n  }\n  return debugState(editor, \"after\"), !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    debug$f(\"Removing everything\"), debugState(editor, \"before\");\n    const previousSelection = editor.selection;\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.children.forEach((_child, i) => {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n        at: [i]\n      });\n    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), debugState(editor, \"after\"), !0;\n  }\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (patch.path.length === 1) {\n    if (!block || !blockPath)\n      return debug$f(\"Block not found\"), !1;\n    const blockIndex = blockPath[0];\n    return debug$f(`Removing block at path [${blockIndex}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: [blockIndex]\n    }), debugState(editor, \"after\"), !0;\n  }\n  return editor.isTextBlock(block) && patch.path[1] === \"children\" && patch.path.length === 3 ? !child || !childPath ? (debug$f(\"Child not found\"), !1) : (debug$f(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, \"before\"), debugVerbose$2 && debug$f(`Removing child at path ${JSON.stringify(childPath)}`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n    at: childPath\n  }), debugState(editor, \"after\"), !0) : !1;\n}\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction debugState(editor, stateName) {\n  debugVerbose$2 && (debug$f(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$f(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));\n}\nfunction findBlockFromPath(editor, path) {\n  let blockIndex = -1;\n  const block = editor.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  return block ? {\n    block,\n    path: [blockIndex]\n  } : {};\n}\nfunction findBlockAndChildFromPath(editor, path) {\n  const {\n    block,\n    path: blockPath\n  } = findBlockFromPath(editor, path);\n  if (!(slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && path[1] === \"children\"))\n    return {\n      block,\n      blockPath,\n      child: void 0,\n      childPath: void 0\n    };\n  let childIndex = -1;\n  const child = block.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  return child ? {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex)\n  } : {\n    block,\n    blockPath,\n    child: void 0,\n    childPath: void 0\n  };\n}\nconst debug$e = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(schemaTypes);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                debug$e.enabled && debug$e(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);\n              });\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$e(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$e(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...patchFunctions.insertTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...patchFunctions.removeTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...patchFunctions.removeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...patchFunctions.splitNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...patchFunctions.insertNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...patchFunctions.setNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...patchFunctions.moveNodePatch(editor, operation, previousChildren)];\n          break;\n      }\n      return !editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([])], editorActor.send({\n        type: \"unset\",\n        previousValue: fromSlateValue(previousChildren, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.setIfMissing)([], []), ...patches]), patches.length > 0 && patches.forEach((patch) => {\n        editorActor.send({\n          type: \"patch\",\n          patch: {\n            ...patch,\n            origin: \"local\"\n          }\n        });\n      }), editor;\n    }, editor;\n  };\n}\nconst debug$d = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const node = op.node;\n        if (op.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, node)) {\n          const nextPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(op.path);\n          editor.children[nextPath[0]] || (debug$d(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n            decorators: []\n          })));\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$c = debugWithName(\"plugin:withPortableTextBlockStyle\");\nfunction createWithPortableTextBlockStyle(editorActor, types) {\n  const defaultStyle = types.styles[0].value;\n  return function(editor) {\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry;\n      for (const op of editor.operations)\n        if (op.type === \"split_node\" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(path, op.path)) {\n          const [child] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [op.path[0] + 1, 0]);\n          if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && child.text === \"\") {\n            debug$c(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              style: defaultStyle\n            }, {\n              at: [op.path[0] + 1],\n              voids: !1\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      normalizeNode(nodeEntry);\n    }, editor;\n  };\n}\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nconst debug$b = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor, types) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = types.decorators.map((t) => t.value);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$b(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$b(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$b(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath), decorators2 = types.decorators.map((decorator) => decorator.value), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$b(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = types.decorators.map((decorator) => decorator.value);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$b(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = types.decorators.map((decorator) => decorator.value), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$b(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$b(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(newMarkDefs, node.markDefs)) {\n          debug$b(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          if (movedToNextSpan || movedToPreviousSpan)\n            return;\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const {\n          selection\n        } = editor, collapsedSelection = selection ? slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) : !1;\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: selection.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpanAnnotations = nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotation) {\n                apply2(op);\n                return;\n              } else if (!previousSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n            if (atTheEndOfSpan) {\n              if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? []\n                });\n                return;\n              }\n              if (!nextSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n          }\n          if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              _type: \"span\",\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark) => decorators.includes(mark))\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const marksWithoutAnnotationMarks = ({\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n              }.marks || []).filter((mark) => decorators.includes(mark));\n              slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                  marks: marksWithoutAnnotationMarks\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === types.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...oldDefs, ...op.properties.markDefs]);\n          debug$b(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst addDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator;\n  if (editor.selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n      const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(editor.selection) ? [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n      })] : [];\n      splitTextNodes.length > 1 && splitTextNodes.every((node) => node[0].marks?.includes(mark)) ? editor.removeMark(mark) : splitTextNodes.forEach(([node, path]) => {\n        const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks\n        }, {\n          at: path,\n          match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n          split: !0,\n          hanging: !0\n        });\n      });\n    } else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n          marks: [...existingMarks, mark]\n        };\n        editor.marks = marks;\n      }\n    }\n    editor.onChange();\n  }\n}, removeDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator, {\n    selection\n  } = editor;\n  if (selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n          marks: existingMarks.filter((eMark) => eMark !== mark)\n        };\n        editor.marks = {\n          marks: marks.marks,\n          _type: \"span\"\n        };\n      }\n    }\n};\nfunction isDecoratorActive({\n  editor,\n  decorator\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedTextNodes = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n    at: editor.selection\n  }));\n  return selectedTextNodes.length === 0 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection) ? selectedTextNodes.every((n) => {\n    const [node] = n;\n    return node.marks?.includes(decorator);\n  }) : ({\n    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n  }.marks || []).includes(decorator);\n}\nconst toggleDecoratorActionImplementation = ({\n  context,\n  action\n}) => {\n  isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator\n  }) ? removeDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.remove\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  }) : addDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.add\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  });\n}, debug$a = debugWithName(\"plugin:withPortableTextSelections\"), debugVerbose$1 = debug$a.enabled && !1;\nfunction createWithPortableTextSelections(editorActor, types) {\n  let prevSelection = null;\n  return function(editor) {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange = null;\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n          if (existing)\n            ptRange = existing;\n          else {\n            const value = editor.children;\n            ptRange = toPortableTextRange(value, editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n          }\n        }\n        debugVerbose$1 && debug$a(`Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(editor.selection)})`), ptRange ? editorActor.send({\n          type: \"selection\",\n          selection: ptRange\n        }) : editorActor.send({\n          type: \"selection\",\n          selection: null\n        });\n      }\n      prevSelection = editor.selection;\n    }, {\n      onChange\n    } = editor;\n    return editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0;\n      onChange(), hasChanges && !editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      }) && emitPortableTextSelection();\n    }, editor;\n  };\n}\nconst debug$9 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextListBlock)(value) && value._type === schemaTypes.block.name, editor.isVoid = (element) => schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$9(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          ...span,\n          _type: schemaTypes.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$9(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$8 = debugWithName(\"plugin:withUtils\");\nfunction createWithUtils({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    return editor.pteExpandToWord = () => {\n      const {\n        selection\n      } = editor;\n      if (selection && !slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n        const [textNode] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection.focus, {\n          depth: 2\n        });\n        if (!textNode || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(textNode) || textNode.text.length === 0) {\n          debug$8(\"pteExpandToWord: Can't expand to word here\");\n          return;\n        }\n        const {\n          focus\n        } = selection, focusOffset = focus.offset, charsBefore = textNode.text.slice(0, focusOffset), charsAfter = textNode.text.slice(focusOffset, -1), isEmpty = (str) => str.match(/\\s/g), whiteSpaceBeforeIndex = charsBefore.split(\"\").reverse().findIndex((str) => isEmpty(str)), newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0, whiteSpaceAfterIndex = charsAfter.split(\"\").findIndex((obj) => isEmpty(obj)), newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);\n        if (!(newStartOffset === newEndOffset || Number.isNaN(newStartOffset) || Number.isNaN(newEndOffset))) {\n          debug$8(\"pteExpandToWord: Expanding to focused word\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n            anchor: {\n              ...selection.anchor,\n              offset: newStartOffset\n            },\n            focus: {\n              ...selection.focus,\n              offset: newEndOffset\n            }\n          });\n          return;\n        }\n        debug$8(\"pteExpandToWord: Can't expand to word here\");\n      }\n    }, editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: schemaTypes.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: schemaTypes.styles[0].value || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => schemaTypes.decorators.find(({\n          value\n        }) => value === decorator))\n      }]\n    }], {\n      schemaTypes\n    })[0], editor;\n  };\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor\n  } = options, schemaTypes = editorActor.getSnapshot().context.schema, operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes\n  }), withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor, schemaTypes), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor, schemaTypes), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor,\n    schemaTypes\n  }), withPortableTextSelections = createWithPortableTextSelections(editorActor, schemaTypes);\n  return createWithEventListeners(editorActor, options.subscriptions)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));\n}, debug$7 = debugWithName(\"component:PortableTextEditor:SlateContainer\"), slateEditors = /* @__PURE__ */ new WeakMap();\nfunction createSlateEditor(config) {\n  const existingSlateEditor = slateEditors.get(config.editorActor);\n  if (existingSlateEditor)\n    return debug$7(\"Reusing existing Slate editor instance\", config.editorActor.id), existingSlateEditor;\n  debug$7(\"Creating new Slate editor instance\", config.editorActor.id);\n  const unsubscriptions = [], subscriptions = [], instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_17__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_15__.createEditor)()), {\n    editorActor: config.editorActor,\n    subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});\n  for (const subscription of subscriptions)\n    unsubscriptions.push(subscription());\n  const initialValue = [instance.pteCreateTextBlock({\n    decorators: []\n  })], slateEditor = {\n    instance,\n    initialValue\n  };\n  return slateEditors.set(config.editorActor, slateEditor), slateEditor;\n}\nconst toggleListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem\n  }) ? removeListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.remove\"\n    }\n  }) : addListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.add\"\n    }\n  });\n}, removeListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isListBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, [\"listItem\", \"level\"], {\n      at\n    });\n}, addListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      level: 1,\n      listItem: action.listItem\n    }, {\n      at\n    });\n};\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nconst toggleStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  isStyleActive({\n    editor: action.editor,\n    style: action.style\n  }) ? removeStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.remove\"\n    }\n  }) : addStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.add\"\n    }\n  });\n}, removeStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const defaultStyle = context.schema.styles[0].value, guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      style: defaultStyle\n    }, {\n      at\n    });\n}, addStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      style: action.style\n    }, {\n      at\n    });\n};\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nconst debug$6 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"focus\"\n        },\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"blur\"\n        },\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      try {\n        return isDecoratorActive({\n          editor,\n          decorator: mark\n        });\n      } catch (err) {\n        return console.warn(err), !1;\n      }\n    },\n    marks: () => ({\n      ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n    }).marks || [],\n    undo: () => editor.undo(),\n    redo: () => editor.redo(),\n    select: (selection) => {\n      const slateSelection = toSlateRange(selection, editor);\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_15__.Node.get(editor, focusChildPath);\n      return isSpanNode && focusNode._type !== types.span.name && (debug$6(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path || [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block object\",\n        blockObject: {\n          name: type.name,\n          value\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        focus: {\n          path,\n          offset: 0\n        },\n        anchor: {\n          path,\n          offset: 0\n        }\n      }, editor);\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => isAnnotationActive({\n      editor,\n      annotation: {\n        name: annotationType\n      }\n    }),\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          action: {\n            type: \"annotation.add\",\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange(selection, editor);\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$6(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          options?.mode === \"blocks\" && (debug$6(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$6(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n          })), editor.children.length === 0 && (editor.children = [editor.pteCreateTextBlock({\n            decorators: []\n          })]), editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);\n      return slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nfunction isAnnotationActive({\n  editor,\n  annotation\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2)\n    return !1;\n  try {\n    const spans = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node)\n    })];\n    if (spans.length === 0 || spans.some(([span]) => !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) || !span.marks || span.marks?.length === 0)) return !1;\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n        depth: 1\n      });\n      return editor.isTextBlock(block) && block.markDefs ? [...accMarkDefs, ...block.markDefs] : accMarkDefs;\n    }, []);\n    return spans.every(([span]) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) ? span.marks?.map((markKey) => selectionMarkDefs.find((def) => def?._key === markKey)?._type)?.includes(annotation.name) : !1);\n  } catch {\n    return !1;\n  }\n}\nconst addAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  const editor = action.editor, {\n    selection: originalSelection\n  } = editor;\n  let paths;\n  if (originalSelection && (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(originalSelection) && (editor.pteExpandToWord(), editor.onChange()), editor.selection)) {\n    let spanPath, markDefPath;\n    const markDefPaths = [];\n    if (!editor.selection)\n      return;\n    const selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n      reverse: slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection)\n    });\n    for (const [block, blockPath] of selectedBlocks) {\n      if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n        continue;\n      const annotationKey = context.keyGenerator(), markDefs = block.markDefs ?? [];\n      markDefs.find((markDef) => markDef._type === action.annotation.name && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n        markDefs: [...markDefs, {\n          _type: action.annotation.name,\n          _key: annotationKey,\n          ...action.annotation.value\n        }]\n      }, {\n        at: blockPath\n      }), markDefPath = [{\n        _key: block._key\n      }, \"markDefs\", {\n        _key: annotationKey\n      }], slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0\n      });\n      const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n      for (const [span, path] of children) {\n        if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, path))\n          continue;\n        const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === action.annotation.name));\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n        }, {\n          at: path\n        }), spanPath = [{\n          _key: block._key\n        }, \"children\", {\n          _key: span._key\n        }];\n      }\n    }\n    markDefPath && spanPath && (paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath\n    });\n  }\n  return paths;\n}, removeAnnotationActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor;\n  if (debug$6(\"Removing annotation\", action.annotation.name), !!editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== action.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, toggleAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  if (isAnnotationActive({\n    editor: action.editor,\n    annotation: {\n      name: action.annotation.name\n    }\n  }))\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.remove\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n  else\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.add\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n};\nfunction insertBlock({\n  block,\n  placement,\n  editor,\n  schema\n}) {\n  if (editor.selection) {\n    const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection.focus.path.slice(0, 1),\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n)\n    }))[0] ?? [void 0, void 0];\n    if (placement === \"after\") {\n      const nextPath = [focusBlockPath[0] + 1];\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n        at: nextPath\n      }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n        anchor: {\n          path: [nextPath[0], 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextPath[0], 0],\n          offset: 0\n        }\n      });\n    } else placement === \"before\" ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n      at: focusBlockPath\n    }) : slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block);\n    focusBlock && isEqualToEmptyEditor([focusBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: focusBlockPath\n    });\n  } else {\n    const lastBlock = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n),\n      at: [],\n      reverse: !0\n    }))[0];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block), lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: lastBlock[1]\n    });\n  }\n}\nconst insertBlockObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  const block = toSlateValue([{\n    _key: context.keyGenerator(),\n    _type: action.blockObject.name,\n    ...action.blockObject.value ? action.blockObject.value : {}\n  }], {\n    schemaTypes: context.schema\n  })[0];\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema\n  });\n}, insertBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  const keyGenerator = context.keyGenerator, schema = context.schema, editor = action.editor;\n  if (!editor.selection)\n    return;\n  const [focusSpan] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    mode: \"lowest\",\n    at: editor.selection.focus,\n    match: (n) => editor.isTextSpan(n),\n    voids: !1\n  }))[0] ?? [void 0], focusDecorators = focusSpan?.marks?.filter((mark) => schema.decorators.some((decorator) => decorator.value === mark)) ?? [], focusAnnotations = focusSpan?.marks?.filter((mark) => !schema.decorators.some((decorator) => decorator.value === mark)) ?? [], anchorBlockPath = editor.selection.anchor.path.slice(0, 1), focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, focusBlockPath);\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(editor.selection), lastFocusBlockChild = focusBlock.children[focusBlock.children.length - 1], atTheEndOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild) ? lastFocusBlockChild.text.length : 0\n    }), atTheStartOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0\n    });\n    if (atTheEndOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n        decorators: [],\n        listItem: focusBlock.listItem,\n        level: focusBlock.level\n      }));\n      return;\n    }\n    if (atTheStartOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n        decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n        listItem: focusBlock.listItem,\n        level: focusBlock.level\n      }));\n      const [nextBlockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath);\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n        anchor: {\n          path: [nextBlockPath, 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextBlockPath, 0],\n          offset: 0\n        }\n      });\n      return;\n    }\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0];\n    if (!atTheStartOfBlock && !atTheEndOfBlock && !selectionAcrossBlocks) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection)\n          return;\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n          at: editor.selection\n        });\n        const [nextNode, nextNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath), {\n          depth: 1\n        });\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n          anchor: {\n            path: [...nextNodePath, 0],\n            offset: 0\n          },\n          focus: {\n            path: [...nextNodePath, 0],\n            offset: 0\n          }\n        }), editor.isTextBlock(nextNode) && nextNode.markDefs && nextNode.markDefs.length > 0) {\n          const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, focusBlockPath)).map((entry) => entry[0]).filter((node) => editor.isTextSpan(node)), children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, nextNodePath);\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child))\n              continue;\n            const marks = child.marks ?? [];\n            for (const mark of marks)\n              schema.decorators.some((decorator) => decorator.value === mark) || prevNodeSpans.some((prevNodeSpan) => prevNodeSpan.marks?.includes(mark)) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(mark, keyGenerator());\n            const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark);\n            lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(marks, newMarks) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              marks: newMarks\n            }, {\n              at: childPath\n            });\n          }\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key\n          }));\n          lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(nextNode.markDefs, newMarkDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: nextNodePath,\n            match: (node) => editor.isTextBlock(node)\n          });\n        }\n      }), editor.onChange();\n      return;\n    }\n  }\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n    always: !0\n  });\n}, insertSoftBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  insertBreakActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"insert.break\"\n    }\n  });\n}, insertInlineObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!context.schema.inlineObjects.some((inlineObject) => inlineObject.name === action.inlineObject.name)) {\n    console.error(\"Unable to insert unknown inline object\");\n    return;\n  }\n  if (!action.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [{\n      _type: action.inlineObject.name,\n      _key: context.keyGenerator(),\n      ...action.inlineObject.value ?? {}\n    }]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, child);\n}, insertSpanActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection) {\n    console.error(\"Unable to perform action without selection\", action);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", action);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...action.decorators ?? []]\n  });\n}, textBlockSetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n    ...action.style ? {\n      style: action.style\n    } : {},\n    ...action.listItem ? {\n      listItem: action.listItem\n    } : {},\n    ...action.level ? {\n      level: action.level\n    } : {}\n  }, {\n    at\n  });\n}, textBlockUnsetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, action.props, {\n    at\n  });\n}, behaviorActionImplementations = {\n  \"annotation.add\": addAnnotationActionImplementation,\n  \"annotation.remove\": removeAnnotationActionImplementation,\n  \"annotation.toggle\": toggleAnnotationActionImplementation,\n  blur: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.blur(action.editor);\n  },\n  \"decorator.add\": addDecoratorActionImplementation,\n  \"decorator.remove\": removeDecoratorActionImplementation,\n  \"decorator.toggle\": toggleDecoratorActionImplementation,\n  focus: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.focus(action.editor);\n  },\n  \"delete.backward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteBackward)(action.editor, action.unit);\n  },\n  \"delete.forward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteForward)(action.editor, action.unit);\n  },\n  \"delete.block\": ({\n    action\n  }) => {\n    const range = toSlateRange({\n      anchor: {\n        path: action.blockPath,\n        offset: 0\n      },\n      focus: {\n        path: action.blockPath,\n        offset: 0\n      }\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(action.editor, {\n      at: range\n    });\n  },\n  \"delete.text\": ({\n    context,\n    action\n  }) => {\n    const value = fromSlateValue(action.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)), anchor = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.anchor\n    }), focus = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.focus\n    });\n    if (!anchor || !focus) {\n      console.error(\"Unable to find anchor or focus selection point\");\n      return;\n    }\n    const range = toSlateRange({\n      anchor,\n      focus\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(action.editor, {\n      at: range\n    });\n  },\n  \"insert.block object\": insertBlockObjectActionImplementation,\n  \"insert.break\": insertBreakActionImplementation,\n  \"insert.inline object\": insertInlineObjectActionImplementation,\n  \"insert.soft break\": insertSoftBreakActionImplementation,\n  \"insert.span\": insertSpanActionImplementation,\n  \"insert.text\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.insertText)(action.editor, action.text);\n  },\n  \"insert.text block\": ({\n    context,\n    action\n  }) => {\n    const block = toSlateValue([{\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      style: context.schema.styles[0].value ?? \"normal\",\n      markDefs: [],\n      children: action.textBlock?.children?.map((child) => ({\n        ...child,\n        _key: context.keyGenerator()\n      })) ?? [{\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: \"\"\n      }]\n    }], {\n      schemaTypes: context.schema\n    })[0];\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement\n    });\n  },\n  effect: ({\n    action\n  }) => {\n    action.effect();\n  },\n  \"list item.add\": addListItemActionImplementation,\n  \"list item.remove\": removeListItemActionImplementation,\n  \"list item.toggle\": toggleListItemActionImplementation,\n  \"move.block\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [toSlatePath(action.to, action.editor)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block down\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block up\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]];\n    if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(at))\n      return;\n    const to = [slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  noop: () => {\n  },\n  select: ({\n    action\n  }) => {\n    const newSelection = toSlateRange(action.selection, action.editor);\n    newSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(action.editor);\n  },\n  \"select.previous block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select previous block without a selection\");\n      return;\n    }\n    const blockPath = action.editor.selection.focus.path.slice(0, 1);\n    if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\");\n      return;\n    }\n    const previousBlockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(blockPath);\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, previousBlockPath);\n  },\n  \"select.next block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select next block without a selection\");\n      return;\n    }\n    const nextBlockPath = [action.editor.selection.focus.path.slice(0, 1)[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, nextBlockPath);\n  },\n  reselect: ({\n    action\n  }) => {\n    const selection = action.editor.selection;\n    selection && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, {\n      ...selection\n    }), action.editor.selection = {\n      ...selection\n    });\n  },\n  \"style.toggle\": toggleStyleActionImplementation,\n  \"style.add\": addStyleActionImplementation,\n  \"style.remove\": removeStyleActionImplementation,\n  \"text block.set\": textBlockSetActionImplementation,\n  \"text block.unset\": textBlockUnsetActionImplementation\n};\nfunction performAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"delete.block\": {\n      behaviorActionImplementations[\"delete.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.text\": {\n      behaviorActionImplementations[\"delete.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.span\": {\n      behaviorActionImplementations[\"insert.span\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text block\": {\n      behaviorActionImplementations[\"insert.text block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.add\": {\n      behaviorActionImplementations[\"list item.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.remove\": {\n      behaviorActionImplementations[\"list item.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block\": {\n      behaviorActionImplementations[\"move.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block down\": {\n      behaviorActionImplementations[\"move.block down\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block up\": {\n      behaviorActionImplementations[\"move.block up\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"noop\":\n      break;\n    case \"effect\": {\n      behaviorActionImplementations.effect({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select\": {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.previous block\": {\n      behaviorActionImplementations[\"select.previous block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.next block\": {\n      behaviorActionImplementations[\"select.next block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"reselect\": {\n      behaviorActionImplementations.reselect({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.add\": {\n      behaviorActionImplementations[\"style.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.remove\": {\n      behaviorActionImplementations[\"style.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.set\": {\n      behaviorActionImplementations[\"text block.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.unset\": {\n      behaviorActionImplementations[\"text block.unset\"]({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      performDefaultAction({\n        context,\n        action\n      });\n  }\n}\nfunction performDefaultAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"annotation.add\": {\n      behaviorActionImplementations[\"annotation.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.remove\": {\n      behaviorActionImplementations[\"annotation.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.toggle\": {\n      behaviorActionImplementations[\"annotation.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"blur\": {\n      behaviorActionImplementations.blur({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.add\": {\n      behaviorActionImplementations[\"decorator.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.remove\": {\n      behaviorActionImplementations[\"decorator.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.toggle\": {\n      behaviorActionImplementations[\"decorator.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.backward\": {\n      behaviorActionImplementations[\"delete.backward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.forward\": {\n      behaviorActionImplementations[\"delete.forward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"focus\": {\n      behaviorActionImplementations.focus({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.block object\": {\n      behaviorActionImplementations[\"insert.block object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.inline object\": {\n      behaviorActionImplementations[\"insert.inline object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.break\": {\n      behaviorActionImplementations[\"insert.break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.soft break\": {\n      behaviorActionImplementations[\"insert.soft break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text\": {\n      behaviorActionImplementations[\"insert.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.toggle\": {\n      behaviorActionImplementations[\"list item.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      behaviorActionImplementations[\"style.toggle\"]({\n        context,\n        action\n      });\n  }\n}\nfunction getActiveDecorators({\n  schema,\n  slateEditorInstance\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value);\n  return ({\n    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(slateEditorInstance) ?? {}\n  }.marks ?? []).filter((mark) => decorators.includes(mark));\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {}\n  },\n  actions: {\n    \"assign behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      behaviors: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update behaviors\"), event.behaviors)\n    }),\n    \"assign schema\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      schema: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update schema\"), event.schema)\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, [\"patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.b)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue((0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(event));\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n      pendingEvents: []\n    }),\n    \"handle behavior event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.b)(({\n      context,\n      event,\n      enqueue\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, [\"behavior event\"]);\n      const defaultAction = event.behaviorEvent.type === \"copy\" || event.behaviorEvent.type === \"key.down\" || event.behaviorEvent.type === \"key.up\" || event.behaviorEvent.type === \"paste\" ? void 0 : {\n        ...event.behaviorEvent,\n        editor: event.editor\n      }, eventBehaviors = context.behaviors.filter((behavior) => behavior.on === event.behaviorEvent.type);\n      if (eventBehaviors.length === 0) {\n        if (!defaultAction)\n          return;\n        enqueue.raise({\n          type: \"behavior action intends\",\n          editor: event.editor,\n          actionIntends: [defaultAction]\n        });\n        return;\n      }\n      const value = fromSlateValue(event.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(event.editor)), selection = toPortableTextRange(value, event.editor.selection, context.schema), editorContext = {\n        activeDecorators: getActiveDecorators({\n          schema: context.schema,\n          slateEditorInstance: event.editor\n        }),\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value\n      };\n      let behaviorOverwritten = !1;\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n          context: editorContext,\n          event: event.behaviorEvent\n        });\n        if (!shouldRun)\n          continue;\n        const actionIntendSets = eventBehavior.actions.map((actionSet) => actionSet({\n          context: editorContext,\n          event: event.behaviorEvent\n        }, shouldRun));\n        for (const actionIntends of actionIntendSets)\n          behaviorOverwritten = behaviorOverwritten || actionIntends.length > 0 && actionIntends.some((actionIntend) => actionIntend.type !== \"effect\"), enqueue.raise({\n            type: \"behavior action intends\",\n            editor: event.editor,\n            actionIntends\n          });\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault();\n          break;\n        }\n      }\n      if (!behaviorOverwritten) {\n        if (!defaultAction)\n          return;\n        enqueue.raise({\n          type: \"behavior action intends\",\n          editor: event.editor,\n          actionIntends: [defaultAction]\n        });\n      }\n    })\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: input.behaviors ?? _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    value: input.value\n  }),\n  on: {\n    unset: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    \"value changed\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    \"invalid value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    error: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    selection: {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)]\n    },\n    blurred: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    focused: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    loading: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n        type: \"loading\"\n      })\n    },\n    patches: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n        event\n      }) => event)\n    },\n    \"done loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n        type: \"done loading\"\n      })\n    },\n    \"update behaviors\": {\n      actions: \"assign behaviors\"\n    },\n    \"update schema\": {\n      actions: \"assign schema\"\n    },\n    \"update value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n        value: ({\n          event\n        }) => event.value\n      })\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    },\n    \"behavior action intends\": {\n      actions: [({\n        context,\n        event\n      }) => {\n        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n          for (const actionIntend of event.actionIntends) {\n            const action = {\n              ...actionIntend,\n              editor: event.editor\n            };\n            performAction({\n              context,\n              action\n            });\n          }\n        }), event.editor.onChange();\n      }, (0,xstate__WEBPACK_IMPORTED_MODULE_19__.b)(({\n        context,\n        event,\n        enqueue\n      }) => {\n        event.actionIntends.some((actionIntend) => actionIntend.type === \"reselect\") && enqueue.raise({\n          type: \"selection\",\n          selection: toPortableTextRange(event.editor.children, event.editor.selection, context.schema)\n        });\n      })]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          states: {\n            \"determine initial edit mode\": {\n              on: {\n                \"done syncing initial value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"annotation.add\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            \"annotation.remove\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            \"annotation.toggle\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            blur: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            \"decorator.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            focus: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            \"insert.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            \"list item.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            },\n            \"style.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({\n                event\n              }) => event)\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          exit: [\"emit ready\"],\n          on: {\n            patch: {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing initial value\": {\n              target: \"pristine\"\n            }\n          }\n        },\n        pristine: {\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: \"normalizing\"\n                },\n                patch: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                },\n                mutation: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                }\n              }\n            },\n            normalizing: {\n              on: {\n                \"done normalizing\": {\n                  target: \"idle\"\n                },\n                patch: {\n                  actions: \"defer event\"\n                },\n                mutation: {\n                  actions: \"defer event\"\n                }\n              }\n            }\n          }\n        },\n        dirty: {\n          entry: [\"emit pending events\", \"clear pending events\"],\n          on: {\n            patch: {\n              actions: \"emit patch event\"\n            },\n            mutation: {\n              actions: \"emit mutation event\"\n            }\n          }\n        }\n      }\n    }\n  }\n}), defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction createEditor(config) {\n  const editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_26__.A)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  });\n  return editorActor.start(), createEditorFromActor(editorActor);\n}\nfunction useCreateEditor(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== config ? (t0 = editorConfigToMachineInput(config), $[0] = config, $[1] = t0) : t0 = $[1];\n  let t1;\n  $[2] !== t0 ? (t1 = {\n    input: t0\n  }, $[2] = t0, $[3] = t1) : t1 = $[3];\n  const editorActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useActorRef)(editorMachine, t1);\n  let t2, t3;\n  return $[4] !== editorActor ? (t3 = createEditorFromActor(editorActor), $[4] = editorActor, $[5] = t3) : t3 = $[5], t2 = t3, t2;\n}\nfunction editorConfigToMachineInput(config) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition ? compileSchemaDefinition(config.schemaDefinition) : createEditorSchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)),\n    value: config.initialValue\n  };\n}\nfunction createEditorFromActor(editorActor) {\n  const slateEditor = createSlateEditor({\n    editorActor\n  }), editable = createEditableAPI(slateEditor.instance, editorActor);\n  return {\n    send: (event) => {\n      editorActor.send(event);\n    },\n    on: (event, listener) => editorActor.on(\n      event,\n      // @ts-expect-error\n      listener\n    ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n}\nconst EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({}), PortableTextEditorSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditorSelection = () => {\n  const selection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorSelectionContext);\n  if (selection === void 0)\n    throw new Error(\"The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.\");\n  return selection;\n}, debug$5 = debugWithName(\"component:PortableTextEditor:SelectionProvider\"), debugVerbose = debug$5.enabled && !1;\nfunction PortableTextEditorSelectionProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n  let t0, t1;\n  $[0] !== props.editorActor ? (t0 = () => {\n    debug$5(\"Subscribing to selection changes\");\n    const subscription = props.editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(() => {\n        debugVerbose && debug$5(\"Setting selection\"), setSelection(event.selection);\n      });\n    });\n    return () => {\n      debug$5(\"Unsubscribing to selection changes\"), subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1);\n  let t2;\n  return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionContext.Provider, { value: selection, children: props.children }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;\n}\nconst debug$4 = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_4__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_27__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  constructor(props) {\n    super(props), props.editor ? this.editor = props.editor : this.editor = createEditor({\n      keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n      schema: props.schemaType,\n      initialValue: props.value,\n      maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n      readOnly: props.readOnly\n    }), this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.schema, this.editable = this.editor._internal.editable;\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createEditorSchema(this.props.schemaType.hasOwnProperty(\"jsonType\") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({\n      type: \"update schema\",\n      schema: this.schemaTypes\n    })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, { editorActor: this.editor._internal.editorActor, onChange: (change) => {\n        this.props.editor || this.props.onChange(change), this.change$.next(change);\n      } }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, { editorActor: this.editor._internal.editorActor, slateEditor: this.editor._internal.slateEditor.instance }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_17__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, { value: this, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, { editorActor: this.editor._internal.editorActor, children: this.props.children }) }) }) })\n    ] });\n  }\n  // Static API methods\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  static blur = (editor) => {\n    debug$4(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  static focus = (editor) => {\n    debug$4(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  static focusChild = (editor) => editor.editable?.focusChild();\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  static getValue = (editor) => editor.editable?.getValue();\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  static insertChild = (editor, type, value) => (debug$4(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  static select = (editor, selection) => {\n    debug$4(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  static toggleBlockStyle = (editor, blockStyle) => (debug$4(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  static toggleMark = (editor, mark) => {\n    debug$4(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  static getFragment = (editor) => (debug$4(\"Host getting fragment\"), editor.editable?.getFragment());\n  static undo = (editor) => {\n    debug$4(\"Host undoing\"), editor.editable?.undo();\n  };\n  static redo = (editor) => {\n    debug$4(\"Host redoing\"), editor.editable?.redo();\n  };\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\nfunction RouteEventsToChanges(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== props ? (t0 = (change) => props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n  const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(t0);\n  let t1, t2;\n  return $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = () => {\n    debug$4(\"Subscribing to editor changes\");\n    const sub = props.editorActor.on(\"*\", (event) => {\n      bb5: switch (event.type) {\n        case \"blurred\": {\n          handleChange({\n            type: \"blur\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"patch\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !0\n          });\n          break bb5;\n        }\n        case \"done loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !1\n          });\n          break bb5;\n        }\n        case \"focused\": {\n          handleChange({\n            type: \"focus\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"value changed\": {\n          handleChange({\n            type: \"value\",\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"invalid value\": {\n          handleChange({\n            type: \"invalidValue\",\n            resolution: event.resolution,\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"error\": {\n          handleChange({\n            ...event,\n            level: \"warning\"\n          });\n          break bb5;\n        }\n        case \"annotation.add\":\n        case \"annotation.remove\":\n        case \"annotation.toggle\":\n        case \"blur\":\n        case \"decorator.add\":\n        case \"decorator.remove\":\n        case \"decorator.toggle\":\n        case \"focus\":\n        case \"insert.block object\":\n        case \"insert.inline object\":\n        case \"list item.toggle\":\n        case \"style.toggle\":\n        case \"patches\":\n        case \"editable\":\n        case \"read only\":\n          break bb5;\n        default:\n          handleChange(event);\n      }\n    });\n    return () => {\n      debug$4(\"Unsubscribing to changes\"), sub.unsubscribe();\n    };\n  }, t2 = [props.editorActor, handleChange], $[2] = handleChange, $[3] = props.editorActor, $[4] = t1, $[5] = t2) : (t1 = $[4], t2 = $[5]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t1, t2), null;\n}\nconst debug$3 = debugWithName(\"components:Leaf\"), EMPTY_MARKS = [], Leaf = (props) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation\n  } = props, spanRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), portableTextEditor = usePortableTextEditor(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), block = children.props.parent, path = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => block ? [{\n    _key: block?._key\n  }, \"children\", {\n    _key: leaf._key\n  }] : [], [block, leaf._key]), decoratorValues = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => schemaTypes.decorators.map((dec) => dec.value), [schemaTypes.decorators]), marks = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))), [decoratorValues, leaf.marks]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => annotationMarks.map((mark_0) => !decoratorValues.includes(mark_0) && block?.markDefs?.find((def) => def._key === mark_0)).filter(Boolean), [annotationMarks, block, decoratorValues]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    debug$3(\"Setting selection and focus from range\");\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blur\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focus\", () => {\n      const sel_0 = PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel_0.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  const content = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    let returnedChildren = children;\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1) => {\n      const schemaType = schemaTypes.decorators.find((dec_0) => dec_0.value === mark_1);\n      if (schemaType && renderDecorator) {\n        const _props = Object.defineProperty({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          schemaType,\n          value: mark_1\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType;\n          }\n        });\n        returnedChildren = renderDecorator(_props);\n      }\n    }), block && annotations.length > 0 && annotations.forEach((annotation) => {\n      const schemaType_0 = schemaTypes.annotations.find((t) => t.name === annotation._type);\n      if (schemaType_0)\n        if (renderAnnotation) {\n          const _props_0 = Object.defineProperty({\n            block,\n            children: returnedChildren,\n            editorElementRef: spanRef,\n            focused,\n            path,\n            selected,\n            schemaType: schemaType_0,\n            value: annotation\n          }, \"type\", {\n            enumerable: !1,\n            get() {\n              return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n            }\n          });\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ref: spanRef, children: renderAnnotation(_props_0) });\n        } else\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultAnnotation, { annotation, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ref: spanRef, children: returnedChildren }) });\n    }), block && renderChild)) {\n      const child = block.children.find((_child) => _child._key === leaf._key);\n      if (child) {\n        const _props_1 = Object.defineProperty({\n          annotations,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: returnedChildren }),\n          editorElementRef: spanRef,\n          focused,\n          path,\n          schemaType: schemaTypes.span,\n          selected,\n          value: child\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.span;\n          }\n        });\n        returnedChildren = renderChild(_props_1);\n      }\n    }\n    return returnedChildren;\n  }, [annotations, block, children, focused, leaf, marks, path, renderAnnotation, renderChild, renderDecorator, schemaTypes.annotations, schemaTypes.decorators, schemaTypes.span, selected]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ...attributes, ref: spanRef, children: content }, leaf._key), [leaf, attributes, content]);\n};\nLeaf.displayName = \"Leaf\";\nconst debug$2 = debugWithName(\"plugin:withHotKeys\"), DEFAULT_HOTKEYS = {\n  marks: {\n    \"mod+b\": \"strong\",\n    \"mod+i\": \"em\",\n    \"mod+u\": \"underline\",\n    \"mod+'\": \"code\"\n  },\n  custom: {}\n};\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS;\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$2(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nconst debug$1 = debugWithName(\"plugin:withInsertData\");\nfunction createWithInsertData(editorActor, schemaTypes) {\n  return function(editor) {\n    const blockTypeName = schemaTypes.block.name, spanTypeName = schemaTypes.span.name, whitespaceOnPasteMode = schemaTypes.block.options.unstable_whitespaceOnPasteMode, toPlainText = (blocks) => blocks.map((block) => editor.isTextBlock(block) ? block.children.map((child) => child._type === spanTypeName ? child.text : `[${schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || \"Object\"}]`).join(\"\") : `[${schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || \"Object\"}]`).join(`\n\n`);\n    return editor.setFragmentData = (data, originEvent) => {\n      const {\n        selection\n      } = editor;\n      if (!selection)\n        return;\n      const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(selection), startVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n        at: start.path\n      }), endVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n        at: end.path\n      });\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) && !startVoid)\n        return;\n      const domRange = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMRange(editor, selection);\n      let contents = domRange.cloneContents();\n      if (endVoid) {\n        const [voidNode] = endVoid, r = domRange.cloneRange(), domNode = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(editor, voidNode);\n        r.setEndAfter(domNode), contents = r.cloneContents();\n      }\n      Array.from(contents.querySelectorAll(\"[data-slate-zero-width]\")).forEach((zw) => {\n        const isNewline = zw.getAttribute(\"data-slate-zero-width\") === \"n\";\n        zw.textContent = isNewline ? `\n` : \"\";\n      }), Array.from(contents.querySelectorAll(\"*\")).forEach((elm) => {\n        elm.removeAttribute(\"contentEditable\"), elm.removeAttribute(\"data-slate-inline\"), elm.removeAttribute(\"data-slate-leaf\"), elm.removeAttribute(\"data-slate-node\"), elm.removeAttribute(\"data-slate-spacer\"), elm.removeAttribute(\"data-slate-string\"), elm.removeAttribute(\"data-slate-zero-width\"), elm.removeAttribute(\"draggable\");\n        for (const key in elm.attributes)\n          elm.hasAttribute(key) && elm.removeAttribute(key);\n      });\n      const div = contents.ownerDocument.createElement(\"div\");\n      div.appendChild(contents), div.setAttribute(\"hidden\", \"true\"), contents.ownerDocument.body.appendChild(div);\n      const asHTML = div.innerHTML;\n      contents.ownerDocument.body.removeChild(div);\n      const fragment = editor.getFragment(), portableText = fromSlateValue(fragment, blockTypeName), asJSON = JSON.stringify(portableText), asPlainText = toPlainText(portableText);\n      data.clearData(), data.setData(\"text/plain\", asPlainText), data.setData(\"text/html\", asHTML), data.setData(\"application/json\", asJSON), data.setData(\"application/x-portable-text\", asJSON), debug$1(\"text\", asPlainText), data.setData(\"application/x-portable-text-event-origin\", originEvent || \"external\"), debug$1(\"Set fragment data\", asJSON, asHTML);\n    }, editor.insertPortableTextData = (data) => {\n      if (!editor.selection)\n        return !1;\n      const pText = data.getData(\"application/x-portable-text\"), origin = data.getData(\"application/x-portable-text-event-origin\");\n      if (debug$1(`Inserting portable text from ${origin} event`, pText), pText) {\n        const parsed = JSON.parse(pText);\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(editor, toSlateValue(parsed, {\n            schemaTypes\n          }), editorActor.getSnapshot().context.keyGenerator, spanTypeName, schemaTypes), validation = validateValue(parsed, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`;\n            return editorActor.send({\n              type: \"error\",\n              name: \"pasteError\",\n              description: errorDescription,\n              data: validation\n            }), debug$1(\"Invalid insert result\", validation), !1;\n          }\n          return _insertFragment(editor, slateValue, schemaTypes), !0;\n        }\n      }\n      return !1;\n    }, editor.insertTextOrHTMLData = (data) => {\n      if (!editor.selection)\n        return debug$1(\"No selection, not inserting\"), !1;\n      const html = data.getData(\"text/html\"), text = data.getData(\"text/plain\");\n      if (html || text) {\n        debug$1(\"Inserting data\", data);\n        let portableText, fragment, insertedType;\n        if (html) {\n          if (portableText = (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode\n          }).map((block) => (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.normalizeBlock)(block, {\n            blockTypeName\n          })), fragment = toSlateValue(portableText, {\n            schemaTypes\n          }), insertedType = \"HTML\", portableText.length === 0)\n            return !1;\n        } else {\n          const textToHtml = `<html><body>${escapeHtml(text).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`;\n          portableText = (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(textToHtml, schemaTypes.portableText).map((block) => (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.normalizeBlock)(block, {\n            blockTypeName\n          })), fragment = toSlateValue(portableText, {\n            schemaTypes\n          }), insertedType = \"text\";\n        }\n        const validation = validateValue(portableText, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\n${validation.resolution?.description}\nTry to insert as plain text (shift-paste) instead.`;\n          return editorActor.send({\n            type: \"error\",\n            name: \"pasteError\",\n            description: errorDescription,\n            data: validation\n          }), debug$1(\"Invalid insert result\", validation), !1;\n        }\n        return debug$1(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`), _insertFragment(editor, fragment, schemaTypes), !0;\n      }\n      return !1;\n    }, editor.insertData = (data) => {\n      editor.insertPortableTextData(data) || editor.insertTextOrHTMLData(data);\n    }, editor.insertFragmentData = (data) => {\n      const fragment = data.getData(\"application/x-portable-text\");\n      if (fragment) {\n        const parsed = JSON.parse(fragment);\n        return editor.insertFragment(parsed), !0;\n      }\n      return !1;\n    }, editor;\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction _regenerateKeys(editor, fragment, keyGenerator, spanTypeName, editorTypes) {\n  return fragment.map((node) => {\n    const newNode = {\n      ...node\n    };\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name);\n      if (annotations.length === 0) {\n        const {\n          markDefs,\n          ...NewNodeNoDefs\n        } = newNode;\n        return {\n          ...NewNodeNoDefs,\n          _key: keyGenerator()\n        };\n      }\n      if ((newNode.markDefs || []).some((def) => !annotations.includes(def._type))) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => annotations.includes(def._type));\n        return {\n          ...newNode,\n          markDefs: allowedAnnotations,\n          _key: keyGenerator()\n        };\n      }\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key, newKey = keyGenerator();\n        return newNode.children = newNode.children.map((child) => child._type === spanTypeName && editor.isTextSpan(child) ? {\n          ...child,\n          marks: child.marks && child.marks.includes(oldKey) ? [...child.marks].filter((mark) => mark !== oldKey).concat(newKey) : child.marks\n        } : child), {\n          ...def,\n          _key: newKey\n        };\n      });\n    }\n    const nodeWithNewKeys = {\n      ...newNode,\n      _key: keyGenerator()\n    };\n    return editor.isTextBlock(nodeWithNewKeys) && (nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n      ...child,\n      _key: keyGenerator()\n    }))), nodeWithNewKeys;\n  });\n}\nfunction _insertFragment(editor, fragment, schemaTypes) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection)\n      return;\n    const [focusBlock, focusPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n      depth: 1\n    });\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {\n        markDefs\n      } = focusBlock;\n      debug$1(\"Mixing markDefs of focusBlock and fragments[0] block\", markDefs, fragment[0].markDefs), lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(markDefs, fragment[0].markDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n        markDefs: lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...fragment[0].markDefs || [], ...markDefs || []])\n      }, {\n        at: focusPath,\n        mode: \"lowest\",\n        voids: !1\n      });\n    }\n    isEqualToEmptyEditor(editor.children, schemaTypes) ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n      at: [0, 0]\n    }), editor.insertFragment(fragment), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: [0]\n    })) : editor.insertFragment(fragment);\n  }), editor.onChange();\n}\nfunction withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations\n}) {\n  const originalApply = slateEditor.apply;\n  return slateEditor.apply = (op) => {\n    originalApply(op), !editorActor.getSnapshot().matches({\n      \"edit mode\": \"read only\"\n    }) && op.type !== \"set_selection\" && syncRangeDecorations(op);\n  }, () => {\n    slateEditor.apply = originalApply;\n  };\n}\nconst debug = debugWithName(\"component:Editable\"), PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n}, PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_4__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = usePortableTextEditor(), ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [rangeDecorationState, setRangeDecorationsState] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const rangeDecorationsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(rangeDecorations), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(EditorActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), schemaTypes = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(editorActor, (s_0) => s_0.context.schema), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSlate)(), blockTypeName = schemaTypes.block.name;\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    const withInsertData = createWithInsertData(editorActor, schemaTypes);\n    if (readOnly)\n      return debug(\"Editable is in read only mode\"), withInsertData(slateEditor);\n    const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);\n    return debug(\"Editable is in edit mode\"), withInsertData(withHotKeys(slateEditor));\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, schemaTypes, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Element, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, schemaTypes, spellCheck }), [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((lProps) => {\n    if (lProps.leaf._type === \"span\") {\n      let rendered = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Leaf, { ...lProps, editorActor, schemaTypes, renderAnnotation, renderChild, renderDecorator, readOnly });\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === \"\")\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: renderPlaceholder() }),\n          rendered\n        ] });\n      const decoration = lProps.leaf.rangeDecoration;\n      return decoration && (rendered = decoration.component({\n        children: rendered\n      })), rendered;\n    }\n    return lProps.children;\n  }, [editorActor, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes]), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, blockTypeName));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = toSlateRange(normalizedSelection, slateEditor);\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor]), syncRangeDecorations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((operation) => {\n    if (rangeDecorations && rangeDecorations.length > 0) {\n      const newSlateRanges = [];\n      if (rangeDecorations.forEach((rangeDecorationItem) => {\n        const slateRange_0 = toSlateRange(rangeDecorationItem.selection, slateEditor);\n        if (!slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(slateRange_0)) {\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: null,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n          return;\n        }\n        let newRange;\n        if (operation && (newRange = moveRangeByOperation(slateRange_0, operation), newRange && newRange !== slateRange_0 || newRange === null && slateRange_0)) {\n          const value = PortableTextEditor.getValue(portableTextEditor), newRangeSelection = toPortableTextRange(value, newRange, schemaTypes);\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: newRangeSelection,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && newSlateRanges.push({\n          ...newRange || slateRange_0,\n          rangeDecoration: rangeDecorationItem\n        });\n      }), newSlateRanges.length > 0) {\n        setRangeDecorationsState(newSlateRanges);\n        return;\n      }\n    }\n    setRangeDecorationsState((rangeDecorationState_0) => rangeDecorationState_0.length > 0 ? [] : rangeDecorationState_0);\n  }, [portableTextEditor, rangeDecorations, schemaTypes, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      syncRangeDecorations(), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());\n  }, [syncRangeDecorations, syncedRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;\n  }, [rangeDecorations, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations\n    });\n    return () => teardown();\n  }, [editorActor, slateEditor, syncRangeDecorations]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event) => {\n    onCopy ? onCopy(event) !== void 0 && event.preventDefault() : event.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"copy\",\n        data: event.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event\n    });\n  }, [onCopy, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_0) => {\n    const value_0 = PortableTextEditor.getValue(portableTextEditor), path = toPortableTextRange(value_0, slateEditor.selection, schemaTypes)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_0,\n      value: value_0,\n      path,\n      schemaTypes\n    });\n    onPasteResult || !slateEditor.selection ? (event_0.preventDefault(), editorActor.send({\n      type: \"loading\"\n    }), Promise.resolve(onPasteResult).then((result_0) => {\n      debug(\"Custom paste function from client resolved\", result_0), !result_0 || !result_0.insert ? (debug(\"No result from custom paste handler, pasting normally\"), slateEditor.insertData(event_0.clipboardData)) : result_0.insert ? slateEditor.insertFragment(toSlateValue(result_0.insert, {\n        schemaTypes\n      })) : console.warn(\"Your onPaste function returned something unexpected:\", result_0);\n    }).catch((error) => (console.error(error), error)).finally(() => {\n      editorActor.send({\n        type: \"done loading\"\n      });\n    })) : event_0.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"paste\",\n        data: event_0.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event_0\n    }), debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_1) => {\n    if (onFocus && onFocus(event_1), !event_1.isDefaultPrevented()) {\n      const selection = PortableTextEditor.getSelection(portableTextEditor);\n      selection === null && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_15__.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({\n        type: \"focused\",\n        event: event_1\n      });\n      const newSelection = PortableTextEditor.getSelection(portableTextEditor);\n      selection === newSelection && editorActor.send({\n        type: \"selection\",\n        selection\n      });\n    }\n  }, [editorActor, onFocus, portableTextEditor, slateEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_2) => {\n    onClick && onClick(event_2);\n    const focusBlockPath = slateEditor.selection ? slateEditor.selection.focus.path.slice(0, 1) : void 0, focusBlock = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(slateEditor, focusBlockPath) : void 0, [_, lastNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Node.last(slateEditor, []), lastBlockPath = lastNodePath.slice(0, 1), lastNodeFocused = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(lastBlockPath, focusBlockPath) : !1, lastBlockIsVoid = focusBlock ? !slateEditor.isTextBlock(focusBlock) : !1;\n    slateEditor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(slateEditor.selection) && lastNodeFocused && lastBlockIsVoid && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n      decorators: []\n    })), slateEditor.onChange());\n  }, [onClick, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_3) => {\n    onBlur && onBlur(event_3), event_3.isPropagationStopped() || editorActor.send({\n      type: \"blurred\",\n      event: event_3\n    });\n  }, [editorActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_4) => {\n    onBeforeInput && onBeforeInput(event_4);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_5) => {\n    props.onKeyDown && props.onKeyDown(event_5), event_5.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_5), event_5.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.down\",\n        keyboardEvent: {\n          key: event_5.key,\n          code: event_5.code,\n          altKey: event_5.altKey,\n          ctrlKey: event_5.ctrlKey,\n          metaKey: event_5.metaKey,\n          shiftKey: event_5.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_5\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_6) => {\n    props.onKeyUp && props.onKeyUp(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.up\",\n        keyboardEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]), decorate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(([, path_0]) => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path_0.length === 0)\n      return [];\n    const result_1 = rangeDecorationState.filter((item) => slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(item) ? path_0.length !== 2 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.focus.path, path_0) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.anchor.path, path_0) : slate__WEBPACK_IMPORTED_MODULE_15__.Range.intersection(item, {\n      anchor: {\n        path: path_0,\n        offset: 0\n      },\n      focus: {\n        path: path_0,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(item, path_0));\n    return result_1.length > 0 ? result_1 : [];\n  }, [slateEditor, schemaTypes, rangeDecorationState]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_17__.Editable,\n    {\n      ...restProps,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nconst EditorContext = react__WEBPACK_IMPORTED_MODULE_4__.createContext(void 0);\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(28), editor = useCreateEditor(props.initialConfig), editorActor = editor._internal.editorActor, slateEditor = editor._internal.slateEditor;\n  let t0, t1;\n  $[0] !== editor ? (t1 = new PortableTextEditor({\n    editor\n  }), $[0] = editor, $[1] = t1) : t1 = $[1], t0 = t1;\n  const portableTextEditor = t0;\n  let t2;\n  $[2] !== portableTextEditor.change$ ? (t2 = (change) => {\n    portableTextEditor.change$.next(change);\n  }, $[2] = portableTextEditor.change$, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== editorActor || $[5] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, { editorActor, onChange: t2 }), $[4] = editorActor, $[5] = t2, $[6] = t3) : t3 = $[6];\n  let t4;\n  $[7] !== editorActor || $[8] !== slateEditor.instance ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, { editorActor, slateEditor: slateEditor.instance }), $[7] = editorActor, $[8] = slateEditor.instance, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== editorActor || $[11] !== props.children ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, { editorActor, children: props.children }), $[10] = editorActor, $[11] = props.children, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== portableTextEditor || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor, children: t5 }), $[13] = portableTextEditor, $[14] = t5, $[15] = t6) : t6 = $[15];\n  let t7;\n  $[16] !== slateEditor.initialValue || $[17] !== slateEditor.instance || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_17__.Slate, { editor: slateEditor.instance, initialValue: slateEditor.initialValue, children: t6 }), $[16] = slateEditor.initialValue, $[17] = slateEditor.instance, $[18] = t6, $[19] = t7) : t7 = $[19];\n  let t8;\n  $[20] !== editorActor || $[21] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, { value: editorActor, children: t7 }), $[20] = editorActor, $[21] = t7, $[22] = t8) : t8 = $[22];\n  let t9;\n  return $[23] !== editor || $[24] !== t3 || $[25] !== t4 || $[26] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(EditorContext.Provider, { value: editor, children: [\n    t3,\n    t4,\n    t8\n  ] }), $[23] = editor, $[24] = t3, $[25] = t4, $[26] = t8, $[27] = t9) : t9 = $[27], t9;\n}\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_4__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4), editor = useEditor(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(props.on);\n  let t0, t1;\n  return $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, on], $[0] = editor, $[1] = on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\nfunction getValue(editor) {\n  return fromSlateValue(editor._internal.slateEditor.instance.children, editor._internal.editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor._internal.slateEditor.instance));\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor || $[1] !== selector ? (t1 = (snapshot) => {\n    const context = {\n      activeDecorators: getActiveDecorators({\n        schema: snapshot.context.schema,\n        slateEditorInstance: editor._internal.slateEditor.instance\n      }),\n      keyGenerator: snapshot.context.keyGenerator,\n      schema: snapshot.context.schema,\n      selection: snapshot.context.selection,\n      value: getValue(editor)\n    };\n    return selector({\n      context\n    });\n  }, $[0] = editor, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(editor._internal.editorActor, t1, compare);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject.js */ \"(ssr)/./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString.js */ \"(ssr)/./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`);\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\nfunction move(arr, from, to) {\n  const nextValue = arr.slice(), val = nextValue[from];\n  return nextValue.splice(from, 1), nextValue.splice(to, 0, val), nextValue;\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction apply$3(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    } else if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"move\") {\n        if (!patch.value || !hasOwn(patch.value, \"from\") || !hasOwn(patch.value, \"to\"))\n          throw new Error(\n            `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n              patch.value\n            )}`\n          );\n        return move(nextValue, patch.value.from, patch.value.to);\n      }\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`);\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = _apply(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction apply$2(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (!lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(patch.value))\n        throw new Error(\"Cannot set value of an object to a non-object\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"setIfMissing\")\n        return value === void 0 ? patch.value : value;\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instad got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__(nextValue, head) : (nextValue[head] = _apply(nextValue[head], {\n    ...patch,\n    path: tail\n  }), nextValue);\n}\nconst OPERATIONS$1 = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  inc(currentValue, nextValue) {\n    return currentValue + nextValue;\n  },\n  dec(currentValue, nextValue) {\n    return currentValue - nextValue;\n  }\n}, SUPPORTED_PATCH_TYPES$1 = Object.keys(OPERATIONS$1);\nfunction apply$1(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES$1.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  return OPERATIONS$1[patch.type](value, patch.value);\n}\nconst OPERATIONS = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  diffMatchPatch(currentValue, nextValue) {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.parsePatch)(nextValue), currentValue, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n}, SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);\nfunction apply(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  const func = OPERATIONS[patch.type];\n  if (func)\n    return func(value, patch.value);\n  throw new Error(\"Unknown patch type\");\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(_apply, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? apply$3(value, patch) : lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__(value) ? apply(value, patch) : lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(value) ? apply$2(value, patch) : apply$1(value, patch);\n}\nfunction _apply(value, patch) {\n  return applyPatch(value, patch);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n\n\n\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", {\n      children\n    }),\n    bullet: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n      children\n    })\n  },\n  DefaultListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  link = ({\n    children,\n    value\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n    href: value?.href,\n    children\n  }),\n  underlineStyle = {\n    textDecoration: \"underline\"\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", {\n      children\n    }),\n    strong: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n      children\n    }),\n    code: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n      children\n    }),\n    underline: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: underlineStyle,\n      children\n    }),\n    \"strike-through\": ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", {\n      children\n    }),\n    link\n  },\n  getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n  },\n  DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: hidden,\n      children: warning\n    }) : /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      style: hidden,\n      children: warning\n    });\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n    className: `unknown__pt__mark__${markType}`,\n    children\n  }),\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n    children\n  }),\n  DefaultUnknownList = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n    children\n  }),\n  DefaultUnknownListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  DefaultHardBreak = () => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n  defaultBlockStyles = {\n    normal: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children\n    }),\n    blockquote: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", {\n      children\n    }),\n    h1: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", {\n      children\n    }),\n    h2: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", {\n      children\n    }),\n    h3: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children\n    }),\n    h4: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", {\n      children\n    }),\n    h5: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", {\n      children\n    }),\n    h6: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", {\n      children\n    })\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(input) ? input : [input],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML),\n    components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]),\n    renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]),\n    rendered = nested.map((node, index) => renderNode({\n      node,\n      index,\n      isInline: !1,\n      renderNode\n    }));\n  return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: rendered\n  });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n        node,\n        index,\n        isInline\n      } = options,\n      key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index: childIndex,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      Span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Span, {\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderBlock(node, index, key, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }), key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), {\n      nodeType: \"block\",\n      type: node._type\n    });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n        value: node,\n        isInline,\n        index,\n        renderNode\n      },\n      Node = components.types[node._type];\n    return Node ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;